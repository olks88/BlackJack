{
	"info": {
		"_postman_id": "af171b1f-bba7-4fea-b541-c1ca60a3432d",
		"name": "Casino_3D_BlackJack",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Game/rules id and parameters",
			"item": [
				{
					"name": "getPlatformToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a056ec0c-5733-4ffc-bde6-06ee16ef19f5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"platform_token\", jsonData.data.platform_token);\r",
									"\r",
									"pm.environment.set(\"AdminPanel_pass\", pm.globals.get(\"AdminPanel_password\"));\r",
									"\r",
									"console.log('cookies:  ' + pm.environment.get(\"AdminPanel_cookies\") + ', password:  ' + pm.environment.get(\"AdminPanel_pass\") + ', login:  ' + pm.environment.get(\"AdminPanel_login\") + ', player_id:  ' + pm.environment.get(\"player_id_random\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "058ef0df-2d72-47cc-b64c-7dca335b7e7c",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"pm.environment.set(\"player_id_random\", player_id_random);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=eur&country=IT&language=en",
							"host": [
								"{{url}}"
							],
							"path": [
								"core",
								"helper",
								"getPlatformToken"
							],
							"query": [
								{
									"key": "gameName",
									"value": "tableBlackjack"
								},
								{
									"key": "player_id",
									"value": "{{player_id_random}}"
								},
								{
									"key": "currency",
									"value": "eur"
								},
								{
									"key": "country",
									"value": "IT"
								},
								{
									"key": "language",
									"value": "en",
									"description": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get Admin Panel cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49e63744-6f66-40f3-9c6b-fa6f8187b3a2",
								"exec": [
									"pm.environment.set(\"AdminPanel_cookies\", 'PHPSESSID=' + pm.cookies.get('PHPSESSID'));",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4cc77d71-9a24-4229-88b8-18e0f9137beb",
								"exec": [
									"pm.environment.set(\"AdminPanel_pass\", pm.globals.get(\"AdminPanel_password\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{AdminPanel_login}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get Game Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42986d79-09d0-4879-9be9-8af0d8144cbe",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"game_id\", jsonData.data[0].id);",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/game/gamesData?length=1000&filters[name]=tableBlackjack",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"game",
								"gamesData"
							],
							"query": [
								{
									"key": "length",
									"value": "1000"
								},
								{
									"key": "filters[name]",
									"value": "tableBlackjack"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get stake.min Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7c9cec0-a29f-44f6-835b-400be20bb210",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"",
									"    for (var i = 0; i < jsonData.data.length; i++) ",
									"    {",
									"        if (jsonData.data[i].key === \"stake.min\" && jsonData.data[i].game_id === null){",
									"            pm.environment.set(\"stake.min_id\", jsonData.data[i].id);",
									"    }}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/betsetting/stakeLimitsData?length=1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"betsetting",
								"stakeLimitsData"
							],
							"query": [
								{
									"key": "length",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get stake.max id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f8ef87a-312b-4ab5-b178-5b2cbe93cd38",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"",
									"    for (var i = 0; i < jsonData.data.length; i++) ",
									"    {",
									"        if (jsonData.data[i].key === \"stake.max\" && jsonData.data[i].game_id === null){",
									"            pm.environment.set(\"stake.max_id\", jsonData.data[i].id);",
									"    }}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/betsetting/stakeLimitsData?length=1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"betsetting",
								"stakeLimitsData"
							],
							"query": [
								{
									"key": "length",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get skin id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a1d9a0a-b4fd-463c-952c-5f341d03f498",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"pm.environment.set(\"skin_id\", jsonData.data[0].id);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/setting/dataSkin?length=1000&filters[label]=Inner Wallet",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"setting",
								"dataSkin"
							],
							"query": [
								{
									"key": "length",
									"value": "1000"
								},
								{
									"key": "filters[label]",
									"value": "Inner Wallet"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get skin id _1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a147b2ac-af49-4b4a-ba4c-70261bc60bd1",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"pm.environment.set(\"skin_id_1\", jsonData.data[0].id);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/setting/dataSkin?length=1000&filters[label]=BetiXon",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"setting",
								"dataSkin"
							],
							"query": [
								{
									"key": "length",
									"value": "1000"
								},
								{
									"key": "filters[label]",
									"value": "BetiXon"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get tableMinMax id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "147a0611-a5d8-400e-bae1-4ac1f25b56b9",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"    for (var i = 0; i < jsonData.data.length; i++) ",
									"    {",
									"        if (jsonData.data[i].key === \"tableMinMax\"){",
									"            pm.environment.set(\"tableMinMax_id\", jsonData.data[i].id);",
									"    }}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/setting/countryRulesData?length=1000&filters[game_id]={{game_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"setting",
								"countryRulesData"
							],
							"query": [
								{
									"key": "length",
									"value": "1000"
								},
								{
									"key": "filters[game_id]",
									"value": "{{game_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "120b82de-8901-4713-925b-a5d3f74f7246",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2f917ded-188a-4ada-82b6-ace65100d3e0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Verify warning message",
			"item": [
				{
					"name": "Deal with bet value </> bet limit",
					"item": [
						{
							"name": "getPlatformToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e9b72a6-83f9-4de7-8b39-9c9a345fdbcd",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"platform_token\", jsonData.data.platform_token);\r",
											"\r",
											"pm.environment.set(\"AdminPanel_pass\", pm.globals.get(\"AdminPanel_password\"));\r",
											"\r",
											"console.log('cookies:  ' + pm.environment.get(\"AdminPanel_cookies\") + ', password:  ' + pm.environment.get(\"AdminPanel_pass\") + ', login:  ' + pm.environment.get(\"AdminPanel_login\") + ', player_id:  ' + pm.environment.get(\"player_id_random\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "007c38f3-f9db-44a8-aae9-3286b44d7de5",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"",
											"pm.environment.set(\"player_id_random\", player_id_random);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=eur&country=IT&language=en",
									"host": [
										"{{url}}"
									],
									"path": [
										"core",
										"helper",
										"getPlatformToken"
									],
									"query": [
										{
											"key": "gameName",
											"value": "tableBlackjack"
										},
										{
											"key": "player_id",
											"value": "{{player_id_random}}"
										},
										{
											"key": "currency",
											"value": "eur"
										},
										{
											"key": "country",
											"value": "IT"
										},
										{
											"key": "language",
											"value": "en",
											"description": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create table limits in Game config (with timeout)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c800602a-eb16-4807-b688-b08262f15a2c",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"higher_rule_id\", jsonData.rule_id)\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{AdminPanel_login}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{AdminPanel_pass}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"type": "text",
										"value": "audio/basic"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{AdminPanel_cookies}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "action",
											"value": "create",
											"type": "text"
										},
										{
											"key": "key",
											"value": "tableMinMax",
											"type": "text"
										},
										{
											"key": "type",
											"value": "json",
											"type": "text"
										},
										{
											"key": "value",
											"value": "{\"min\":10,\"max\":100}",
											"type": "text"
										},
										{
											"key": "priority",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "description",
											"value": "test for table max/min with highest priority",
											"type": "text"
										},
										{
											"key": "game_id",
											"value": "{{game_id}}",
											"type": "text"
										},
										{
											"key": "for_front",
											"value": "1",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
									"host": [
										"{{url}}"
									],
									"path": [
										"AdminPanel",
										"setting",
										"countryRulesChange"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deal for player cards value > bet limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88a5c259-3010-415c-a92c-7710b842c614",
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1155\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1155);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Bets sum '101' is above than maximum table limit: 100'  \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bets sum '101' is above than maximum table limit: 100\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9342cabc-64ec-4524-a1df-3781cd92bd7e",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "101",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "9h"
										},
										{
											"key": "cards[0][1]",
											"value": "2h"
										},
										{
											"key": "dealer_cards[0]",
											"value": "10s",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "As",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deal for player cards value < bet limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9cea202-cc41-4295-862f-b493c8496488",
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1154\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1154);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Bets sum '9' is below than minimum table limit: 10'  \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bets sum '9' is below than minimum table limit: 10\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1d65dc58-6e60-4735-8ccd-1d03eb084cf4",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "9",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "9h"
										},
										{
											"key": "cards[0][1]",
											"value": "2h"
										},
										{
											"key": "dealer_cards[0]",
											"value": "10s",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "As",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Deal with bet value </> default  limit",
					"item": [
						{
							"name": "Changing default min limit in settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11be59a2-1029-400b-ab0c-24343aaed4e9",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{AdminPanel_login}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{AdminPanel_pass}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "audio/basic",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{AdminPanel_cookies}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "rule_id",
											"value": "{{stake.min_id}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "edit",
											"type": "text"
										},
										{
											"key": "value",
											"value": "12",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
									"host": [
										"{{url}}"
									],
									"path": [
										"AdminPanel",
										"setting",
										"countryRulesChange"
									]
								}
							},
							"response": []
						},
						{
							"name": "Changing default max limit in settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69bbe193-f2d4-4404-9e3d-a8b9ef120523",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{AdminPanel_login}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{AdminPanel_pass}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "audio/basic",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{AdminPanel_cookies}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "rule_id",
											"value": "{{stake.max_id}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "edit",
											"type": "text"
										},
										{
											"key": "value",
											"value": "98",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
									"host": [
										"{{url}}"
									],
									"path": [
										"AdminPanel",
										"setting",
										"countryRulesChange"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deal for player cards value > default limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a2462ed-7228-4a7b-9aa7-8ab705f53fa2",
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1153\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1153);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = ''bets.0.stake' value '99' is above than maximum bet limit: 98'  \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"'bets.0.stake' value '99' is above than maximum bet limit: 98\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4dfa239d-1d05-4767-82bc-73178bf328e4",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "99",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "9h"
										},
										{
											"key": "cards[0][1]",
											"value": "2h"
										},
										{
											"key": "dealer_cards[0]",
											"value": "10s",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "As",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deal for player cards value <  default limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc59ce3b-76c7-433a-9604-a495a18242f2",
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1152\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1152);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = '  'bets.0.stake' value '11' is below than minimum bet limit: 12'  \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"'bets.0.stake' value '11' is below than minimum bet limit: 12\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "716bee20-3a13-4f47-b063-b033b277e6d6",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "11",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "9h"
										},
										{
											"key": "cards[0][1]",
											"value": "2h"
										},
										{
											"key": "dealer_cards[0]",
											"value": "10s",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "As",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deal with cards value =  default min limit for 3 player hands",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b3c5829-1ef7-4753-a30e-28e9ec2fee2b",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Data exists\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"pm.test(\"Data has 3 bets\", function () {\r",
											"    pm.expect((jsonData.data.bets).length).to.deep.equal(3);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "522ed519-f144-48f1-95a6-9b5a5bb36763",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "12",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "9h"
										},
										{
											"key": "cards[0][1]",
											"value": "2h"
										},
										{
											"key": "bets[1][stake]",
											"value": "12",
											"type": "text"
										},
										{
											"key": "cards[1][0]",
											"value": "10d"
										},
										{
											"key": "cards[1][1]",
											"value": "3d"
										},
										{
											"key": "bets[2][stake]",
											"value": "12",
											"type": "text"
										},
										{
											"key": "cards[2][0]",
											"value": "8c"
										},
										{
											"key": "cards[2][1]",
											"value": "5c"
										},
										{
											"key": "dealer_cards[0]",
											"value": "10s",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "As",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "bets[1][hand_id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "bets[2][hand_id]",
											"value": "2",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deal with cards value =  default max limit for 3 player hands",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "294b1b2e-05d6-4aa6-ad09-e72598c02cea",
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"code = 1155\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1155);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Bets sum '294' is above than maximum table limit: 100' \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bets sum '294' is above than maximum table limit: 100\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "86b344e9-5353-47d6-a595-524d828f14aa",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "98",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "9h"
										},
										{
											"key": "cards[0][1]",
											"value": "2h"
										},
										{
											"key": "bets[1][stake]",
											"value": "98",
											"type": "text"
										},
										{
											"key": "cards[1][0]",
											"value": "10d"
										},
										{
											"key": "cards[1][1]",
											"value": "3d"
										},
										{
											"key": "bets[2][stake]",
											"value": "98",
											"type": "text"
										},
										{
											"key": "cards[2][0]",
											"value": "8c"
										},
										{
											"key": "cards[2][1]",
											"value": "5c"
										},
										{
											"key": "dealer_cards[0]",
											"value": "10s",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "As",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "bets[1][hand_id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "bets[2][hand_id]",
											"value": "2",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Changing back default min limit in settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d538d7e-0d0e-429c-88aa-f5e81aa611f7",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{AdminPanel_login}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{AdminPanel_pass}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "audio/basic",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{AdminPanel_cookies}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "rule_id",
											"value": "{{stake.min_id}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "edit",
											"type": "text"
										},
										{
											"key": "value",
											"value": "0.001",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
									"host": [
										"{{url}}"
									],
									"path": [
										"AdminPanel",
										"setting",
										"countryRulesChange"
									]
								}
							},
							"response": []
						},
						{
							"name": "Changing back default max limit in settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21706986-033b-48d9-a026-55a553669acb",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{AdminPanel_login}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{AdminPanel_pass}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "audio/basic",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{AdminPanel_cookies}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "rule_id",
											"value": "{{stake.max_id}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "edit",
											"type": "text"
										},
										{
											"key": "value",
											"value": "10000",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
									"host": [
										"{{url}}"
									],
									"path": [
										"AdminPanel",
										"setting",
										"countryRulesChange"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created highest table limits in Game config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4804f80-04c2-4b42-948d-28e2dc7fc14c",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"postman.setEnvironmentVariable(\"higher_rule_id\", '')\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{AdminPanel_login}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{AdminPanel_pass}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "audio/basic",
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{AdminPanel_cookies}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "rule_id",
											"value": "{{higher_rule_id}}",
											"type": "text"
										},
										{
											"key": "action",
											"value": "delete",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
									"host": [
										"{{url}}"
									],
									"path": [
										"AdminPanel",
										"setting",
										"countryRulesChange"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Deal with bet > balance amount",
					"item": [
						{
							"name": "getPlatformToken at EUR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80230943-b9e5-444e-a97d-8e971c59cda1",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"platform_token\", jsonData.data.platform_token)\r",
											"\r",
											"console.log('cookies:  ' + pm.environment.get(\"AdminPanel_cookies\") + ', password:  ' + pm.environment.get(\"AdminPanel_pass\") + ', login:  ' + pm.environment.get(\"AdminPanel_login\") + ', player_id:  ' + pm.environment.get(\"player_id_random\"));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "16b30393-04f2-4f38-a137-0d5c28aa6747",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"pm.environment.set(\"player_id_random\", player_id_random);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=EUR&language=en&country=IT",
									"host": [
										"{{url}}"
									],
									"path": [
										"core",
										"helper",
										"getPlatformToken"
									],
									"query": [
										{
											"key": "gameName",
											"value": "tableBlackjack"
										},
										{
											"key": "player_id",
											"value": "{{player_id_random}}"
										},
										{
											"key": "currency",
											"value": "EUR"
										},
										{
											"key": "language",
											"value": "en"
										},
										{
											"key": "country",
											"value": "IT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Change player balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b0486bc-1fa6-4bde-98a7-ce4933f304c7",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Player balance = 100\", function () {\r",
											"   pm.expect(jsonData.data[0].balance).to.deep.equal(100);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"balance\", jsonData.data[0].balance);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b19ff4a1-05f8-4bcd-8802-fb57fc18cadc",
										"exec": [
											"",
											" ",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{AdminPanel_login}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{AdminPanel_pass}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/core/helper/changePlayerBalance?platform_token={{platform_token}}&amount=100",
									"host": [
										"{{url}}"
									],
									"path": [
										"core",
										"helper",
										"changePlayerBalance"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "amount",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deal with bet stake > balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f00099b-eb36-4da8-9073-30f789fbd56e",
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"code = 831\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(\"831\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Placing bets error. Insufficient funds' \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Placing bets error. Insufficient funds\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "32a2e957-31b4-410f-b2c3-4c6a4a46e438",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "101",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "9h"
										},
										{
											"key": "cards[0][1]",
											"value": "2h"
										},
										{
											"key": "dealer_cards[0]",
											"value": "10s",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "As",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Chips/limits/balance chacking according to currency",
			"item": [
				{
					"name": "getPlatformToken at EUR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ab1d46a-737f-45d8-a6a7-4369cc0db984",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"platform_token\", jsonData.data.platform_token)\r",
									"\r",
									"console.log('cookies:  ' + pm.environment.get(\"AdminPanel_cookies\") + ', password:  ' + pm.environment.get(\"AdminPanel_pass\") + ', login:  ' + pm.environment.get(\"AdminPanel_login\") + ', player_id:  ' + pm.environment.get(\"player_id_random\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "95ca0bb5-1fd2-407b-a088-9eaaaee04fe2",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"pm.environment.set(\"player_id_random\", player_id_random);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=EUR&language=en&country=IT",
							"host": [
								"{{url}}"
							],
							"path": [
								"core",
								"helper",
								"getPlatformToken"
							],
							"query": [
								{
									"key": "gameName",
									"value": "tableBlackjack"
								},
								{
									"key": "player_id",
									"value": "{{player_id_random}}"
								},
								{
									"key": "currency",
									"value": "EUR"
								},
								{
									"key": "language",
									"value": "en"
								},
								{
									"key": "country",
									"value": "IT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getPlayerToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6da13d7c-0d74-42fa-9a71-d1683a0f9e8d",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"\r",
									"\r",
									"pm.environment.set(\"player_token\", jsonData.data.player_token);\r",
									"\r",
									"pm.environment.set(\"player_platform_id\", jsonData.data.player_platform_id);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/wallet/api/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"wallet",
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "get start Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5557e4ef-ae63-48cd-a969-25f358c7726a",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"balance\", jsonData.data.balance);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"balance currency = player currency\", function () {",
									"    pm.expect(String(jsonData.data.currency)).to.deep.equal(\"EUR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/wallet/api/balance?player_token={{player_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"wallet",
								"api",
								"balance"
							],
							"query": [
								{
									"key": "player_token",
									"value": "{{player_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getPlatformToken in IRR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bd1c411-a937-42ac-bb51-ee7b93e98312",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"platform_token\", jsonData.data.platform_token);\r",
									"\r",
									"pm.environment.set(\"AdminPanel_pass\", pm.globals.get(\"AdminPanel_password\"));\r",
									"\r",
									"console.log('cookies:  ' + pm.environment.get(\"AdminPanel_cookies\") + ', password:  ' + pm.environment.get(\"AdminPanel_pass\") + ', login:  ' + pm.environment.get(\"AdminPanel_login\") + ', player_id:  ' + pm.environment.get(\"player_id_random\"));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51a4d5ad-fa1e-478b-bc00-735fc6402d02",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=IRR&country=IT&language=en",
							"host": [
								"{{url}}"
							],
							"path": [
								"core",
								"helper",
								"getPlatformToken"
							],
							"query": [
								{
									"key": "gameName",
									"value": "tableBlackjack"
								},
								{
									"key": "player_id",
									"value": "{{player_id_random}}"
								},
								{
									"key": "currency",
									"value": "IRR"
								},
								{
									"key": "country",
									"value": "IT"
								},
								{
									"key": "language",
									"value": "en",
									"description": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create chipsMaxValue in Game config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b58aa530-6315-4250-aa4b-6140f95ed604",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"higher_rule_id\", jsonData.rule_id)\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"type": "text",
								"value": "audio/basic"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{AdminPanel_cookies}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "action",
									"value": "create",
									"type": "text"
								},
								{
									"key": "key",
									"value": "chipsMaxValue",
									"type": "text"
								},
								{
									"key": "type",
									"value": "float",
									"type": "text"
								},
								{
									"key": "value",
									"value": "200",
									"type": "text"
								},
								{
									"key": "priority",
									"value": "1000",
									"type": "text"
								},
								{
									"key": "description",
									"value": "test: max for currency exchange",
									"type": "text"
								},
								{
									"key": "game_id",
									"value": "{{game_id}}",
									"description": "Blackjack",
									"type": "text"
								},
								{
									"key": "for_front",
									"value": "0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"setting",
								"countryRulesChange"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create chipsMinValue in Game config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72544d5b-a271-47be-92e0-3217c1c57f0d",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"lower_rule_id\", jsonData.rule_id)\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "audio/basic",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{AdminPanel_cookies}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "action",
									"value": "create",
									"type": "text"
								},
								{
									"key": "key",
									"value": "chipsMinValue",
									"type": "text"
								},
								{
									"key": "type",
									"value": "float",
									"type": "text"
								},
								{
									"key": "value",
									"value": "1",
									"type": "text"
								},
								{
									"key": "priority",
									"value": "1000",
									"type": "text"
								},
								{
									"key": "description",
									"value": "test: min for currency exchange",
									"type": "text"
								},
								{
									"key": "game_id",
									"value": "{{game_id}}",
									"description": "Blackjack",
									"type": "text"
								},
								{
									"key": "for_front",
									"value": "0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"setting",
								"countryRulesChange"
							]
						}
					},
					"response": []
				},
				{
					"name": "Changing default max limit in settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fa29fb2-e5cc-46ff-b1f3-81e34844d2bc",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "audio/basic",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{AdminPanel_cookies}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rule_id",
									"value": "{{stake.max_id}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "edit",
									"type": "text"
								},
								{
									"key": "value",
									"value": "10000",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"setting",
								"countryRulesChange"
							]
						}
					},
					"response": []
				},
				{
					"name": "Changing default min limit in settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72eca86e-0805-4042-bcfb-30b788e44e4b",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "audio/basic",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{AdminPanel_cookies}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rule_id",
									"value": "{{stake.min_id}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "edit",
									"type": "text"
								},
								{
									"key": "value",
									"value": "0.001",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"setting",
								"countryRulesChange"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create tableMinMax",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "058ed8db-9ddd-4b91-96ba-e42250bb5e26",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"tableMinMax_id\", jsonData.rule_id)\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "audio/basic",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{AdminPanel_cookies}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "action",
									"value": "create",
									"type": "text"
								},
								{
									"key": "key",
									"value": "tableMinMax",
									"type": "text"
								},
								{
									"key": "type",
									"value": "json",
									"type": "text"
								},
								{
									"key": "value",
									"value": "{\"min\":0.5,\"max\":200}",
									"type": "text"
								},
								{
									"key": "priority",
									"value": "1000",
									"type": "text"
								},
								{
									"key": "description",
									"value": "test: tableMinMax",
									"type": "text"
								},
								{
									"key": "game_id",
									"value": "{{game_id}}",
									"description": "Blackjack",
									"type": "text"
								},
								{
									"key": "for_front",
									"value": "1",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"setting",
								"countryRulesChange"
							]
						}
					},
					"response": []
				},
				{
					"name": "deal for exchange rate EUR/IRR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2c8a684-d42f-48ab-85be-caff601a829c",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cbdcdda8-5da0-4892-aeee-ec0180ba1c0c",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10000",
									"type": "text"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get exchange rate for IRR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07f00c5d-5e84-4157-8083-d60645d1f969",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"pm.environment.set(\"exchange_rate\", jsonData.data[0].exchange_rate);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"",
									"",
									"console.log((typeof parseInt(pm.environment.get(\"exchange_rate\"),10)) +  parseFloat(pm.environment.get(\"exchange_rate\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/reports/getBetsData?length=1000&filters[currency]=IRR&order[by]=id&order[dir]=DESC",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"reports",
								"getBetsData"
							],
							"query": [
								{
									"key": "length",
									"value": "1000"
								},
								{
									"key": "filters[currency]",
									"value": "IRR"
								},
								{
									"key": "order[by]",
									"value": "id"
								},
								{
									"key": "order[dir]",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "limits/balance at currency checking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78b77e04-78d4-43f9-b93f-e70287207744",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Balance cheking\", function () {\r",
									"    pm.expect(jsonData.data.user.balance).to.be.within((parseFloat(pm.environment.get(\"balance\"))*parseFloat(pm.environment.get(\"exchange_rate\"))).toFixed(2) * 0.99, (parseFloat(pm.environment.get(\"balance\"))*parseFloat(pm.environment.get(\"exchange_rate\"))).toFixed(2) * 1.01);});\r",
									"\r",
									"pm.test(\"Currency checking\", function () {\r",
									"    pm.expect(jsonData.data.currency.code).to.deep.equal(\"IRR\");\r",
									"});\r",
									"\r",
									"pm.test(\"Stake.min checking\", function () {\r",
									"    pm.expect(jsonData.data.gameParams['stake.min']).to.deep.equal(20);});\r",
									"\r",
									"pm.test(\"Stake.max checking\", function () {\r",
									"    pm.expect(jsonData.data.gameParams['stake.max']).to.deep.equal(100000000);});\r",
									"\r",
									"pm.test(\"tableMin checking\", function () {\r",
									"    pm.expect(jsonData.data.gameParams.tableMinMax.min*20000)==(jsonData.data.gameParams.tableMinMax.min);\r",
									"});\r",
									"\r",
									"pm.test(\"tableMax checking\", function () {\r",
									"    pm.expect(jsonData.data.gameParams.tableMinMax.max*10000)==(jsonData.data.gameParams.tableMinMax.max);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "619eb37c-217c-4971-b8c7-6ced887356f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/init?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"init"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "chips at currency checking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2c6f739-bd43-4af4-8fd2-b6f8aace0062",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"tests[\"Chips min\"] = jsonData.data.gameParams.chips.list[0].value == 10000;\r",
									"tests[\"Chips max\"] = jsonData.data.gameParams.chips.list[7].value == 2500000;\r",
									"\r",
									"tests[\"Chips quantity\"] = (jsonData.data.gameParams.chips.list).length == 8;   \r",
									"    \r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e7367534-b992-4acb-b0a6-0b3c1c75a89a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/init?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"init"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Change chipsMaxValue in Game config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f81102ee-7f9e-4ff5-b7c6-cb54b09f24f7",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "8dzBWdIrRAssvM",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "audio/basic",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{AdminPanel_cookies}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "action",
									"value": "edit",
									"type": "text"
								},
								{
									"key": "value",
									"value": "30000",
									"type": "text"
								},
								{
									"key": "rule_id",
									"value": "{{higher_rule_id}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"setting",
								"countryRulesChange"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change chipsMinValue in Game config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e14fa10-ae33-4d5d-86d0-1bd5ca4e34c5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "8dzBWdIrRAssvM",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "audio/basic",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{AdminPanel_cookies}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "action",
									"value": "edit",
									"type": "text"
								},
								{
									"key": "value",
									"value": "0.0000005",
									"type": "text"
								},
								{
									"key": "rule_id",
									"value": "{{lower_rule_id}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"setting",
								"countryRulesChange"
							]
						}
					},
					"response": []
				},
				{
					"name": "chips max/min at currency checking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2f855a8-0e76-4a3c-a3d2-08d98be9e43a",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Chips min\", function () {\r",
									"    pm.expect(jsonData.data.gameParams.chips.list[0][\"value\"]).to.deep.equal(0.01);\r",
									"});\r",
									"\r",
									"pm.test(\"Chips max\", function () {\r",
									"    pm.expect(jsonData.data.gameParams.chips.list[29][\"value\"]).to.deep.equal(500000000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Chips quantity\", function () {\r",
									"    pm.expect((jsonData.data.gameParams.chips.list).length).to.deep.equal(30);\r",
									"});  \r",
									"    \r",
									"\r",
									"\r",
									"\r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "313b45f4-9d42-434a-bb9f-53a45bbe0850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/init?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"init"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete created chipMaxValue in Game config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bde66176-1efc-4103-be53-e9ca6b249c0c",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"higher_rule_id\", '');\r",
									"\r",
									"postman.setEnvironmentVariable(\"exchange_rate\", '')\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "audio/basic",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{AdminPanel_cookies}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rule_id",
									"value": "{{higher_rule_id}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "delete",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"setting",
								"countryRulesChange"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete created chipMinValue in Game config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b070b05a-0eda-436d-a2ec-fd1f20ae16ca",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"lower_rule_id\", '')\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "audio/basic",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{AdminPanel_cookies}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rule_id",
									"value": "{{lower_rule_id}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "delete",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"setting",
								"countryRulesChange"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete created tableMinMax",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a0974f3-082a-4e47-b28a-088084b74520",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"tableMinMax_id\", '');\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{AdminPanel_login}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{AdminPanel_pass}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "audio/basic",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "{{AdminPanel_cookies}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "rule_id",
									"value": "{{tableMinMax_id}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "delete",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/AdminPanel/setting/countryRulesChange",
							"host": [
								"{{url}}"
							],
							"path": [
								"AdminPanel",
								"setting",
								"countryRulesChange"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dc59dfc1-0b40-4120-a910-bc2349588e83",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "30dd732f-26f3-48a0-b407-c32a5d73198c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Verify that you can't deal after deal",
			"item": [
				{
					"name": "deal for the 1st time",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7108dc4-1ffc-41db-9ac9-50bfe0fda189",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "11f5815c-27db-4804-9a16-cb91d56f1ba8",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
									"",
									"pm.sendRequest({",
									"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "bets[1][stake]",
									"value": "20",
									"type": "text"
								},
								{
									"key": "bets[2][stake]",
									"value": "30",
									"type": "text"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "bets[1][hand_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "bets[2][hand_id]",
									"value": "2",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deal for the same hand/bet at the 2nd time",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa5eeea5-3cb9-4194-810b-3a8206d2ee63",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status = error\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code = 1307\", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1324);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message = '\\'bets.1.hand_id\\' value \\'1\\' not unique' \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"\\'bets.1.hand_id\\' value \\'1\\' not unique\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a17d468f-5b0b-4a10-94d5-4237b5207128",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "bets[1][stake]",
									"value": "20",
									"type": "text"
								},
								{
									"key": "bets[2][stake]",
									"value": "30",
									"type": "text"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "bets[1][hand_id]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "bets[2][hand_id]",
									"value": "0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Verify sum of cards value",
			"item": [
				{
					"name": "deal for 2-7 clubs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4521e5b9-17e5-4843-9095-39e9e2f347c8",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Cards value for:2+3=5\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(5);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for 5\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.equal(parseInt(jsonData.data.bets[0].values_title));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Cards value for:4+5=9\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(9);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for 9\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.equal(parseInt(jsonData.data.bets[1].values_title));\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:6+7=13\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(13);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for 13\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.equal(parseInt(jsonData.data.bets[2].values_title));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
									"pm.environment.set(\"bet2_id\", jsonData.data.bets[1].bet_id);\r",
									"pm.environment.set(\"bet3_id\", jsonData.data.bets[2].bet_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1072e7a3-9823-4fc5-810b-d69c436a6d03",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
									"",
									"pm.sendRequest({",
									"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "bets[1][stake]",
									"value": "20",
									"type": "text"
								},
								{
									"key": "bets[2][stake]",
									"value": "30",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "2c"
								},
								{
									"key": "cards[0][1]",
									"value": "3c"
								},
								{
									"key": "cards[1][0]",
									"value": "4c"
								},
								{
									"key": "cards[1][1]",
									"value": "5c"
								},
								{
									"key": "cards[2][0]",
									"value": "6c"
								},
								{
									"key": "cards[2][1]",
									"value": "7c"
								},
								{
									"key": "dealer_cards[0]",
									"value": "6s",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "7s",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "bets[1][hand_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "bets[2][hand_id]",
									"value": "2",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Bet information of all bets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8216ca20-bd66-49fd-a90b-c3e03c38bb60",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Q-ty of bets =3\", function () {\r",
									"    pm.expect((jsonData.data.bets).length).to.deep.equal(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"1st Bet status = stood \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"accepted\");\r",
									"});\r",
									"\r",
									"pm.test(\"1st Bet stake = 10 \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(30);\r",
									"});\r",
									"\r",
									"pm.test(\"1st Bet type = standard \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"standard\");\r",
									"});\r",
									"\r",
									"pm.test(\"1st Bet cards: 2c, 3c\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].cards).to.deep.equal([\"6c\", \"7c\"]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"1st Bet status = stood \", function () {\r",
									"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"accepted\");\r",
									"});\r",
									"\r",
									"pm.test(\"1st Bet stake = 10 \", function () {\r",
									"    pm.expect(jsonData.data.bets[1].stake).to.deep.equal(20);\r",
									"});\r",
									"\r",
									"pm.test(\"1st Bet type = standard \", function () {\r",
									"    pm.expect(jsonData.data.bets[1].type).to.deep.equal(\"standard\");\r",
									"});\r",
									"\r",
									"pm.test(\"1st Bet cards: 2c, 3c\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].cards).to.deep.equal([\"4c\", \"5c\"]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"1st Bet status = stood \", function () {\r",
									"    pm.expect(jsonData.data.bets[2].status).to.deep.equal(\"accepted\");\r",
									"});\r",
									"\r",
									"pm.test(\"1st Bet stake = 10 \", function () {\r",
									"    pm.expect(jsonData.data.bets[2].stake).to.deep.equal(10);\r",
									"});\r",
									"\r",
									"pm.test(\"1st Bet type = standard \", function () {\r",
									"    pm.expect(jsonData.data.bets[2].type).to.deep.equal(\"standard\");\r",
									"});\r",
									"\r",
									"pm.test(\"1st Bet cards: 2c, 3c\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].cards).to.deep.equal([\"2c\", \"3c\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f4612626-5bec-4ace-a202-e2f282aaf961",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/bets?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"bets"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Bet description of 1st bet",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0cb07ec6-fd4e-48f7-a0b3-ffecda9d92fa",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"1st Bet status = stood \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"accepted\");\r",
									"});\r",
									"\r",
									"pm.test(\"1st Bet stake = 10 \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(10);\r",
									"});\r",
									"\r",
									"pm.test(\"1st Bet type = standard \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"standard\");\r",
									"});\r",
									"\r",
									"pm.test(\"1st Bet cards: 2c, 3c\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].cards).to.deep.equal([\"2c\", \"3c\"]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Game status for 1st bet = active\", function () {\r",
									"    pm.expect(jsonData.data.game.status).to.deep.equal(\"active\");\r",
									"});\r",
									"\r",
									"pm.test(\"Dealer cards at 1st bet description: 6s\", function () {\r",
									"    pm.expect(jsonData.data.game.dealer_cards).to.deep.equal([\"6s\"]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "523fef7e-191a-4caf-b046-8815cbb9f104",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/bet?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"bet"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Bet description of 2nd bet",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51b5b189-bc65-412c-9c89-47b875a1b669",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"2nd Bet status = stood \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"accepted\");\r",
									"});\r",
									"\r",
									"pm.test(\"2nd Bet stake = 20 \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(20);\r",
									"});\r",
									"\r",
									"pm.test(\"2nd Bet type = standard \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"standard\");\r",
									"});\r",
									"\r",
									"pm.test(\"2nd Bet cards: 4c, 5c\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].cards).to.deep.equal([\"4c\", \"5c\"]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Game status for 2nd bet = active\", function () {\r",
									"    pm.expect(jsonData.data.game.status).to.deep.equal(\"active\");\r",
									"});\r",
									"\r",
									"pm.test(\"Dealer cards at 2nd bet description: 6s\", function () {\r",
									"    pm.expect(jsonData.data.game.dealer_cards).to.deep.equal([\"6s\"]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d1904a6-b6b7-42d1-93e5-cb9da8b581e1",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/bet?platform_token={{platform_token}}&bet_id={{bet2_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"bet"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet2_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Bet description of 3rd bet",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60190b44-2f02-4847-a618-de2cac9c00e3",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"3rd  Bet status = stood \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"accepted\");\r",
									"});\r",
									"\r",
									"pm.test(\"3rd  Bet stake = 30 \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(30);\r",
									"});\r",
									"\r",
									"pm.test(\"3rd  Bet type = standard \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"standard\");\r",
									"});\r",
									"\r",
									"pm.test(\"3rd  Bet cards: 6c, 7c\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].cards).to.deep.equal([\"6c\", \"7c\"]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Game status for 3rd  bet = active\", function () {\r",
									"    pm.expect(jsonData.data.game.status).to.deep.equal(\"active\");\r",
									"});\r",
									"\r",
									"pm.test(\"Dealer cards at 3rd  bet description: 6s\", function () {\r",
									"    pm.expect(jsonData.data.game.dealer_cards).to.deep.equal([\"6s\"]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set(\"bet1_id\", \"\");\r",
									"pm.environment.set(\"bet2_id\", \"\");\r",
									"pm.environment.set(\"bet3_id\", \"\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "826d3883-436a-4cc1-9348-5ac8ca74976c",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/bet?platform_token={{platform_token}}&bet_id={{bet3_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"bet"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet3_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deal for 8-King clubs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee3db821-1f5b-413d-9785-f996250ffe6e",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Cards value for:8+9=17\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(17);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for 17\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.equal(parseInt(jsonData.data.bets[0].values_title));\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for: 10+J=20\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for 20\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.equal(parseInt(jsonData.data.bets[1].values_title));\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:Q+K=20\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(20);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c29c8a11-439b-4eff-8986-b1ebf79e877f",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
									"",
									"pm.sendRequest({",
									"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "bets[1][stake]",
									"value": "20",
									"type": "text"
								},
								{
									"key": "bets[2][stake]",
									"value": "30",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "8c"
								},
								{
									"key": "cards[0][1]",
									"value": "9c"
								},
								{
									"key": "cards[1][0]",
									"value": "10c"
								},
								{
									"key": "cards[1][1]",
									"value": "Jc"
								},
								{
									"key": "cards[2][0]",
									"value": "Qc"
								},
								{
									"key": "cards[2][1]",
									"value": "Kc"
								},
								{
									"key": "dealer_cards[0]",
									"value": "6c",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "7c",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "bets[1][hand_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "bets[2][hand_id]",
									"value": "2",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deal for 2-7 hearts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "677b8623-db63-467c-8802-79fc15375fef",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Cards value for:2+6=8\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(8);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for 8\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.equal(parseInt(jsonData.data.bets[0].values_title));\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:4+5=9\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(9);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for 9\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.equal(parseInt(jsonData.data.bets[1].values_title));\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:3+7=10\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for 10\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.equal(parseInt(jsonData.data.bets[2].values_title));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9fb8bc55-d31d-4741-bdcd-9c6a56d87920",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
									"",
									"pm.sendRequest({",
									"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "bets[1][stake]",
									"value": "20",
									"type": "text"
								},
								{
									"key": "bets[2][stake]",
									"value": "30",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "2h"
								},
								{
									"key": "cards[0][1]",
									"value": "6h"
								},
								{
									"key": "cards[1][0]",
									"value": "4h"
								},
								{
									"key": "cards[1][1]",
									"value": "5h"
								},
								{
									"key": "cards[2][0]",
									"value": "3h"
								},
								{
									"key": "cards[2][1]",
									"value": "7h"
								},
								{
									"key": "dealer_cards[0]",
									"value": "6d",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "7d",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "bets[1][hand_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "bets[2][hand_id]",
									"value": "2",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deal for 8-King hearts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f92c4fb9-b710-4d99-a9bd-b10369129432",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Cards value for:Q+9=19\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(19);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for 19\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.equal(parseInt(jsonData.data.bets[0].values_title));\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:10+J=20\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:8+K=18\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(18);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for 18\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.equal(parseInt(jsonData.data.bets[2].values_title));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5184fe0-7bb1-46d1-92c5-df04caa78084",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
									"",
									"pm.sendRequest({",
									"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "bets[1][stake]",
									"value": "20",
									"type": "text"
								},
								{
									"key": "bets[2][stake]",
									"value": "30",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "Qh"
								},
								{
									"key": "cards[0][1]",
									"value": "9h"
								},
								{
									"key": "cards[1][0]",
									"value": "10h"
								},
								{
									"key": "cards[1][1]",
									"value": "Jh"
								},
								{
									"key": "cards[2][0]",
									"value": "8h"
								},
								{
									"key": "cards[2][1]",
									"value": "Kh"
								},
								{
									"key": "dealer_cards[0]",
									"value": "6h",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "7h",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "bets[1][hand_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "bets[2][hand_id]",
									"value": "2",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deal for 2-7 diamonds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "efc7072b-a093-451b-9b69-3945c4152373",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Cards value for:2+3=5\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(5);\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:4+5=9\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(9);\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:6+7=13\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(13);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "741d3f3d-cb4a-4f9f-ba9e-d0cb1342c76b",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
									"",
									"pm.sendRequest({",
									"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "bets[1][stake]",
									"value": "20",
									"type": "text"
								},
								{
									"key": "bets[2][stake]",
									"value": "30",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "2d"
								},
								{
									"key": "cards[0][1]",
									"value": "3d"
								},
								{
									"key": "cards[1][0]",
									"value": "4d"
								},
								{
									"key": "cards[1][1]",
									"value": "5d"
								},
								{
									"key": "cards[2][0]",
									"value": "6d"
								},
								{
									"key": "cards[2][1]",
									"value": "7d"
								},
								{
									"key": "dealer_cards[0]",
									"value": "4s",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "5s",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "bets[1][hand_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "bets[2][hand_id]",
									"value": "2",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deal for 8-King diamonds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17a69b50-f0df-4bb3-bb36-bdb1184738a5",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Cards value for:8+J=18\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(18);\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:10+K=20\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:9+Q=19\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(19);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b1bf8a99-46e3-4b93-9e0d-13f792f76129",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
									"",
									"pm.sendRequest({",
									"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "bets[1][stake]",
									"value": "20",
									"type": "text"
								},
								{
									"key": "bets[2][stake]",
									"value": "30",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "8d"
								},
								{
									"key": "cards[0][1]",
									"value": "Jd"
								},
								{
									"key": "cards[1][0]",
									"value": "10d"
								},
								{
									"key": "cards[1][1]",
									"value": "Kd"
								},
								{
									"key": "cards[2][0]",
									"value": "Qd"
								},
								{
									"key": "cards[2][1]",
									"value": "9d"
								},
								{
									"key": "dealer_cards[0]",
									"value": "4c",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "5c",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "bets[1][hand_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "bets[2][hand_id]",
									"value": "2",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deal for 2-7 spades",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4167429d-0033-41db-b3c2-f1f53fe6c82b",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Cards value for:2+3=5\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(5);\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:4+5=9\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(9);\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:6+7=13\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(13);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7a35aa76-cdbe-4a1f-84d8-fa09dfe3d8e6",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
									"",
									"pm.sendRequest({",
									"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "bets[1][stake]",
									"value": "20",
									"type": "text"
								},
								{
									"key": "bets[2][stake]",
									"value": "30",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "2s"
								},
								{
									"key": "cards[0][1]",
									"value": "3s"
								},
								{
									"key": "cards[1][0]",
									"value": "4s"
								},
								{
									"key": "cards[1][1]",
									"value": "5s"
								},
								{
									"key": "cards[2][0]",
									"value": "6s"
								},
								{
									"key": "cards[2][1]",
									"value": "7s"
								},
								{
									"key": "dealer_cards[0]",
									"value": "4d",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "5d",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "bets[1][hand_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "bets[2][hand_id]",
									"value": "2",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deal for 8-King spades",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df907f77-3024-4c6c-bb8e-0665ec5f86e9",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Cards value for:8+9=17\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(17);\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for: 10+J=20\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:Q+K=20\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(20);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cdf0af5d-2383-44cb-86a1-edb310ead050",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
									"",
									"pm.sendRequest({",
									"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "bets[1][stake]",
									"value": "20",
									"type": "text"
								},
								{
									"key": "bets[2][stake]",
									"value": "30",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "8s"
								},
								{
									"key": "cards[0][1]",
									"value": "9s"
								},
								{
									"key": "cards[1][0]",
									"value": "10s"
								},
								{
									"key": "cards[1][1]",
									"value": "Js"
								},
								{
									"key": "cards[2][0]",
									"value": "Qs"
								},
								{
									"key": "cards[2][1]",
									"value": "Ks"
								},
								{
									"key": "dealer_cards[0]",
									"value": "4h",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "5h",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "bets[1][hand_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "bets[2][hand_id]",
									"value": "2",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deal for Aces (value = 11)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd34f7f9-a411-4146-8b00-fe541939345f",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Cards value for:A+9=20\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for A+9=20\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].values_title).to.equal(\"10/20\");\r",
									"});\r",
									"\r",
									"pm.test(\"Values is an array with 2 values\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].values).to.deep.equal([10,20]);\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for: A+10=21\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(21);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for A+10=21\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.equal(parseInt(jsonData.data.bets[1].values_title));\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for:A+K=21\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(21);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for A+K=21\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.equal(parseInt(jsonData.data.bets[2].values_title));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ed296fa4-093d-4d47-a494-f2720e15b3e1",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
									"",
									"pm.sendRequest({",
									"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "bets[1][stake]",
									"value": "20",
									"type": "text"
								},
								{
									"key": "bets[2][stake]",
									"value": "30",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "As"
								},
								{
									"key": "cards[0][1]",
									"value": "9c"
								},
								{
									"key": "cards[1][0]",
									"value": "Ah"
								},
								{
									"key": "cards[1][1]",
									"value": "10d"
								},
								{
									"key": "cards[2][0]",
									"value": "Ac"
								},
								{
									"key": "cards[2][1]",
									"value": "Kh"
								},
								{
									"key": "dealer_cards[0]",
									"value": "2c",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "3c",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "bets[1][hand_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "bets[2][hand_id]",
									"value": "2",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deal for Aces (value = 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35716831-6ee7-4164-babf-6d45a1a10ec3",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Cards value for:A+10=21\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(21);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for A+10=21\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.equal(parseInt(jsonData.data.bets[0].values_title));\r",
									"});\r",
									"\r",
									"pm.test(\"Values is an array with 1 value for A+10\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].values).to.deep.equal([21]);\r",
									"});\r",
									"\r",
									"pm.test(\"Cards value for: Ah+As=12\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(12);\r",
									"});\r",
									"\r",
									"pm.test(\"Values_title = value for Ah+As=12\", function () {\r",
									"    pm.expect(\"2/12\").to.equal(jsonData.data.bets[1].values_title);\r",
									"});\r",
									"\r",
									"pm.test(\"Values is an array with 2 values\", function () {\r",
									"    pm.expect(jsonData.data.bets[1].values).to.deep.equal([2,12]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Cards value for:Ac+Ad=12\", function () {\r",
									"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(12);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e889ec17-b4d9-44f9-8b1a-a45744326c4a",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
									"",
									"pm.sendRequest({",
									"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "bets[1][stake]",
									"value": "20",
									"type": "text"
								},
								{
									"key": "bets[2][stake]",
									"value": "30",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "Ad"
								},
								{
									"key": "cards[0][1]",
									"value": "10c"
								},
								{
									"key": "cards[1][0]",
									"value": "Ah"
								},
								{
									"key": "cards[1][1]",
									"value": "As"
								},
								{
									"key": "cards[2][0]",
									"value": "Ac"
								},
								{
									"key": "cards[2][1]",
									"value": "Ad"
								},
								{
									"key": "dealer_cards[0]",
									"value": "2d",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "3d",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "bets[1][hand_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "bets[2][hand_id]",
									"value": "2",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8f94380f-d306-41b3-8edd-e2f81c8444b1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3a48556f-bc30-4c66-8655-c34159c7f260",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Verify cards Split",
			"item": [
				{
					"name": "Split for number+Higher cards",
					"item": [
						{
							"name": "verify Split availability (numbers, Aces, High cards)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "223bb439-4fb2-458e-bc5a-113c8b1aa05a",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Split for cards:10+10\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Cards value for:10+10=20\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(20);\r",
											"});\r",
											"\r",
											"pm.test(\"Split for cards:A+A\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Cards value for:Ac+Ad=12\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(12);\r",
											"});\r",
											"\r",
											"pm.test(\"Split for cards:Q+K\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].canSplit).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Cards value for:Q+K=20\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(20);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53c91913-6b8d-4d28-8679-fd9eb7e05b26",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "bets[1][stake]",
											"value": "20",
											"type": "text"
										},
										{
											"key": "bets[2][stake]",
											"value": "30",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "10d"
										},
										{
											"key": "cards[0][1]",
											"value": "10c"
										},
										{
											"key": "cards[1][0]",
											"value": "Ah"
										},
										{
											"key": "cards[1][1]",
											"value": "As"
										},
										{
											"key": "cards[2][0]",
											"value": "Qc"
										},
										{
											"key": "cards[2][1]",
											"value": "Kd"
										},
										{
											"key": "dealer_cards[0]",
											"value": "2h",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "3h",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "bets[1][hand_id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "bets[2][hand_id]",
											"value": "2",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify Split availability for number(10)+High card",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50f0502c-dc9c-4b93-a879-d4f3410df90c",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Split for cards:10+Q\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Cards value for:10+Q=20\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(20);\r",
											"});\r",
											"\r",
											"pm.test(\"Split for cards:10+K\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Cards value for:10+K=20\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(20);\r",
											"});\r",
											"\r",
											"pm.test(\"Split for cards:10+J\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].canSplit).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Cards value for:10+J=20\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(20);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "19488f02-c93f-4667-a70d-184df9ec6415",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "bets[1][stake]",
											"value": "20",
											"type": "text"
										},
										{
											"key": "bets[2][stake]",
											"value": "30",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "10d"
										},
										{
											"key": "cards[0][1]",
											"value": "Qc"
										},
										{
											"key": "cards[1][0]",
											"value": "10h"
										},
										{
											"key": "cards[1][1]",
											"value": "Ks"
										},
										{
											"key": "cards[2][0]",
											"value": "10c"
										},
										{
											"key": "cards[2][1]",
											"value": "Jd"
										},
										{
											"key": "dealer_cards[0]",
											"value": "2s",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "3s",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "bets[1][hand_id]",
											"value": "2",
											"type": "text"
										},
										{
											"key": "bets[2][hand_id]",
											"value": "4",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify Split unavailability",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46cc6ba3-b8c1-4c17-8c5a-6a17e2036a1c",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Split for cards:10+A\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Cards value for:10+A=21\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(21);\r",
											"});\r",
											"\r",
											"pm.test(\"Split for cards:9+K\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Cards value for:9+K=19\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(19);\r",
											"});\r",
											"\r",
											"pm.test(\"Split for cards:10+9\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Cards value for:10+9=19\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(19);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3d69be8-742a-40d7-96d2-3e932c935b4c",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "bets[1][stake]",
											"value": "20",
											"type": "text"
										},
										{
											"key": "bets[2][stake]",
											"value": "30",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "10d"
										},
										{
											"key": "cards[0][1]",
											"value": "Ac"
										},
										{
											"key": "cards[1][0]",
											"value": "9h"
										},
										{
											"key": "cards[1][1]",
											"value": "Ks"
										},
										{
											"key": "cards[2][0]",
											"value": "10c"
										},
										{
											"key": "cards[2][1]",
											"value": "9d"
										},
										{
											"key": "dealer_cards[0]",
											"value": "2d",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "3d",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "bets[1][hand_id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "bets[2][hand_id]",
											"value": "2",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPlatformToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14ed4a03-1d41-4f22-b46c-b671914281e8",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"platform_token\", jsonData.data.platform_token);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef61de1d-813f-471a-a4b1-b18a17ad021b",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"pm.environment.set(\"player_id_random\", player_id_random);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=eur&country=IT&language=en",
									"host": [
										"{{url}}"
									],
									"path": [
										"core",
										"helper",
										"getPlatformToken"
									],
									"query": [
										{
											"key": "gameName",
											"value": "tableBlackjack"
										},
										{
											"key": "player_id",
											"value": "{{player_id_random}}"
										},
										{
											"key": "currency",
											"value": "eur"
										},
										{
											"key": "country",
											"value": "IT"
										},
										{
											"key": "language",
											"value": "en",
											"description": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "deal with cards for split",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45d4b61b-e78b-4e48-91d1-29d42872237e",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Split available for cards:10+Q\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Split unavailable for cards:10+9\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
											"\r",
											"pm.environment.set(\"bet2_id\", jsonData.data.bets[1].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ee219d71-02ca-4da9-be3b-3a2b8690e6d5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "bets[1][stake]",
											"value": "20",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "10d"
										},
										{
											"key": "cards[0][1]",
											"value": "Qc"
										},
										{
											"key": "cards[1][0]",
											"value": "10h"
										},
										{
											"key": "cards[1][1]",
											"value": "9c"
										},
										{
											"key": "dealer_cards[0]",
											"value": "2d",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "3d",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "bets[1][hand_id]",
											"value": "1",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify unavailable Split for the 2nd hand with different cards  values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a226c22b-4acc-4a21-a0de-d563dc25c0b2",
										"exec": [
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1317\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1317);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'This bet doesn't have cards to split. Split not possible.' \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"This bet doesn't have cards to split. Split not possible.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a62b8a1-22fb-4f8e-801b-fd3af0ae1307",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/split?platform_token={{platform_token}}&bet_id={{bet2_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"split"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet2_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "play Split for the 1st hand",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c3a9588-2051-4267-abd4-63a32159f7b8",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"verify 1st card is the same\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].lastDealtCard).to.deep.equal(\"10d\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"verify 2nd card value is the same (Q+K=20)\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].values).to.deep.equal([20]);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify bet_id number for splitted new 2nd bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(parseInt(pm.environment.get(\"bet1_id\"),10) + 2);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"bet2_id\", jsonData.data.bets[0].bet_id);\r",
											"\r",
											"console.log(jsonData.data.bets[0].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f155f3ae-9600-4be8-b434-5dba9f89bfe7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/split?platform_token={{platform_token}}&bet_id={{bet1_id}}&cards=Kc",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"split"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										},
										{
											"key": "cards",
											"value": "Kc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify 2nd Bet created after Split",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc2dd840-18cc-4210-a33e-0fe92d40fde5",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"New bet is created\", function () {\r",
											"    pm.expect((jsonData.data.bets).length).to.deep.equal(3);\r",
											"});\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"equal stake checking \", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(jsonData.data.bets[2].stake);\r",
											"});\r",
											"\r",
											"pm.test(\"old Bet status = stood \", function () {\r",
											"    pm.expect(jsonData.data.bets[2].status).to.deep.equal(\"accepted\");\r",
											"});\r",
											"\r",
											"pm.test(\"new Bet status = stood \", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"accepted\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet type of new bet = split \", function () {\r",
											"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"split\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet type of old bet = standard \", function () {\r",
											"    pm.expect(jsonData.data.bets[2].type).to.deep.equal(\"standard\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Bet status of 2nd bet = stood \", function () {\r",
											"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"accepted\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet type of 2nd bet = standard \", function () {\r",
											"    pm.expect(jsonData.data.bets[1].type).to.deep.equal(\"standard\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "55fca2c1-f489-4c39-bef7-6f0d1e2809fd",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/bets?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"bets"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify Split unavailability for the 2nd tme (parent bet:Q+K)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75035ee2-0749-47da-9a1d-417b32e48d9a",
										"exec": [
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1316\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1316);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'This bet has already splitted. Split not possible.' \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"This bet has already splitted. Split not possible.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", \"\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e99ec01b-1208-4490-bed9-64c3905323c1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/split?platform_token={{platform_token}}&bet_id={{bet1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"split"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify Split unavailability for the 2nd time (2nd bet: 10d)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4ab97b7-5210-4fe5-88ab-58b72c85e053",
										"exec": [
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1318\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1318);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Bet type is not 'standard'. Split not possible.' \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet type is not 'standard'. Split not possible.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a2c41d2e-3752-47df-a0f7-3f33bd7faa54",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/split?platform_token={{platform_token}}&bet_id={{bet2_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"split"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet2_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify availability to Hit 2nd bet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1dc94250-cd41-4c47-8d18-499468936db4",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"New cars is dealed\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].lastDealtCard).to.deep.equal(\"10h\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet2_id\",\"\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9182d38a-6375-41e8-ad06-d1bbc2d5f0ee",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet2_id}}&card=10h",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"hit"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet2_id}}"
										},
										{
											"key": "card",
											"value": "10h"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Split for Aces",
					"item": [
						{
							"name": "getPlatformToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b197483b-bcd7-4642-a93d-66d168115883",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"platform_token\", jsonData.data.platform_token);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "65383fda-4faa-4b74-92ae-1cf54aee04a7",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"pm.environment.set(\"player_id_random\", player_id_random);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=eur&country=IT&language=en",
									"host": [
										"{{url}}"
									],
									"path": [
										"core",
										"helper",
										"getPlatformToken"
									],
									"query": [
										{
											"key": "gameName",
											"value": "tableBlackjack"
										},
										{
											"key": "player_id",
											"value": "{{player_id_random}}"
										},
										{
											"key": "currency",
											"value": "eur"
										},
										{
											"key": "country",
											"value": "IT"
										},
										{
											"key": "language",
											"value": "en",
											"description": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "deal with cards for split: A+A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d19aa86f-4791-4b2a-ae2f-17ea90d3cdd5",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Split available for cards:A+A\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "db5ac927-68b6-4a6e-9a11-461e75cc8a9f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "bets[1][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "Ad"
										},
										{
											"key": "cards[0][1]",
											"value": "Ac"
										},
										{
											"key": "dealer_cards[0]",
											"value": "5h",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "9c",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "bets[1][hand_id]",
											"value": "1",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "play Split for Aces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2a69371-e4ad-48e1-84ba-64f9bc01b451",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"verify 1st card is the same\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].cards[0]).to.deep.equal(\"Ad\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"verify 2nd card value is the same (Ac+10c=21)\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].values).to.deep.equal([21]);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify bet_id number for splitted new 2nd bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(parseInt(pm.environment.get(\"bet1_id\"),10) + 2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify unavailability to split parent bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify unavailability to split new bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifystatus for new bet = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify status fo parent bet = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet2_id\", jsonData.data.bets[0].bet_id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b1cc31b6-3e8c-49e4-bfe4-49dfea0dc282",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/split?platform_token={{platform_token}}&bet_id={{bet1_id}}&cards=10c,9s",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"split"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										},
										{
											"key": "cards",
											"value": "10c,9s"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify Split unavailability for the 2nd tme (parent bet:A+10)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68fa607c-6b1d-4223-af5f-e35c38f9ead5",
										"exec": [
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1312\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Bet with bet_id=... has already stood' \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet1_id\") + \" has already stood\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c1f8d29-6741-401d-888d-2deff63fa35e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/split?platform_token={{platform_token}}&bet_id={{bet1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"split"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify Split unavailability for the 2nd time (new bet: A+9)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a38baa8c-6f33-4304-adc5-266815d93fe7",
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1312\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Bet with bet_id=... has already stood' \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet2_id\") + \" has already stood\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a8506b97-d57d-43ce-847d-ed90dd6cc8a4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/split?platform_token={{platform_token}}&bet_id={{bet2_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"split"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet2_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify unavailability to Hit new bet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08766403-00d4-47c3-aee6-f4b27de0bd94",
										"exec": [
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1312\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Bet with bet_id=... has already stood' \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet2_id\") + \" has already stood\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67de1606-7ec8-4b56-a999-07466c7aa6af",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet2_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"hit"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet2_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify unavailability to Hit parent bet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d774e95-5453-49db-91db-95b81f674a3b",
										"exec": [
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1312\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Bet with bet_id=... has already stood' \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet1_id\") + \" has already stood\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "650e2b68-fefd-4120-943c-4d3c69503187",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"hit"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify unavailability to Double new bet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5faf12b-aee7-4e9e-b424-b5279113f918",
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1312\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Bet with bet_id=... has already stood' \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet2_id\") + \" has already stood\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "df570383-1e26-4196-9e48-127b14025eb2",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/double?platform_token={{platform_token}}&bet_id={{bet2_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"double"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet2_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify unavailability to Double parent bet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77a9e801-e0c4-4087-896a-8bc4507a53ab",
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1312\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Bet with bet_id=... has already stood' \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet1_id\") + \" has already stood\");\r",
											"});\r",
											"\r",
											"pm.environment.set(\"bet2_id\", \"\");\r",
											"pm.environment.set(\"bet1_id\", \"\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce6a9c0b-35aa-4da5-949a-f99095425264",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/double?platform_token={{platform_token}}&bet_id={{bet1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"double"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Verify cards Hit",
			"item": [
				{
					"name": "getPlatformToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b1f6787-1537-4f4a-972b-13026e8d3bae",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"platform_token\", jsonData.data.platform_token);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "814f3865-1e26-45b7-818c-5509e7ac014c",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"pm.environment.set(\"player_id_random\", player_id_random);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=eur&country=IT&language=en",
							"host": [
								"{{url}}"
							],
							"path": [
								"core",
								"helper",
								"getPlatformToken"
							],
							"query": [
								{
									"key": "gameName",
									"value": "tableBlackjack"
								},
								{
									"key": "player_id",
									"value": "{{player_id_random}}"
								},
								{
									"key": "currency",
									"value": "eur"
								},
								{
									"key": "country",
									"value": "IT"
								},
								{
									"key": "language",
									"value": "en",
									"description": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deal to recieved bet_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a12f2b7e-9fcd-40bf-b83a-95379c5731c8",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8e375f7e-25c6-44e2-8f11-840188282434",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "100",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "Qd"
								},
								{
									"key": "cards[0][1]",
									"value": "4c"
								},
								{
									"key": "dealer_cards[0]",
									"value": "10h",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "9c",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Hit for new card",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df9546e3-8d85-44cc-bff1-d1d7c04ab02c",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Bet status = accepted \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"accepted\");\r",
									"});\r",
									"\r",
									"pm.test(\"Cards nominal cheking: 'Qd','4c','4d' \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].cards).to.deep.equal([\"Qd\",\"4c\",\"4d\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Number of cards cheking =3 \", function () {\r",
									"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Sum of cards value  = 18 \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(18);\r",
									"});\r",
									"\r",
									"pm.test(\"Value of cards at tooltip  = 20 \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].values_title).to.deep.equal(\"18\");\r",
									"});\r",
									"\r",
									"pm.test(\"Split is unavailable \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Double is available \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7c1c975b-9adf-43f4-8f6f-bc39fb1dc5a1",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet1_id}}&card=4d",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"hit"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								},
								{
									"key": "card",
									"value": "4d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Hit 2nd time (for the 4th card)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26b1c48c-52b9-4fd3-abdb-4b3051512023",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Bet status = accepted \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"accepted\");\r",
									"});\r",
									"\r",
									"pm.test(\"Cards nominal cheking: 'Qd','4c','4d', '2h' \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].cards).to.deep.equal([\"Qd\",\"4c\",\"4d\",\"2h\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Number of cards cheking =4 \", function () {\r",
									"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Sum of cards value  = 20 \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(20);\r",
									"});\r",
									"\r",
									"pm.test(\"Value of cards at tooltip  = 20 \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].values_title).to.deep.equal(\"20\");\r",
									"});\r",
									"\r",
									"pm.test(\"Split is unavailable \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Double is available \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f01a1bf1-3c32-4c47-a149-2389c0e0fd18",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet1_id}}&card=2h",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"hit"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								},
								{
									"key": "card",
									"value": "2h"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Hit 3rd time (for the Bust)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f93fdf2e-1bc9-404e-9ec2-230ee0206734",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Bet status = completed \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Cards nominal cheking: 'Qd','4c','4d', '2h', '3s' \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].cards).to.deep.equal([\"Qd\",\"4c\",\"4d\",\"2h\",\"3s\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Number of cards cheking =5 \", function () {\r",
									"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(5);\r",
									"});\r",
									"\r",
									"pm.test(\"Sum of cards value  = 23 \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(23);\r",
									"});\r",
									"\r",
									"pm.test(\"Value of cards at tooltip  = 23 \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].values_title).to.deep.equal(\"23\");\r",
									"});\r",
									"\r",
									"pm.test(\"Split is unavailable \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Double is unavailable \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result = player Bust \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b5fbcb07-a4e6-46bb-bb13-8e4e759c2d67",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet1_id}}&card=3s",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"hit"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								},
								{
									"key": "card",
									"value": "3s"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Hit unavaolability after Bust",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7988813e-9f2c-4190-9325-db66bf26f0c0",
								"exec": [
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status = error \", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code = 1313 \", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1313);\r",
									"});\r",
									"\r",
									"pm.test(\"Sum of cards value  = 25 \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet1_id\") + \" has already completed\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7cb128cb-d9f2-44ee-8417-137281645f7c",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet1_id}}&card=2s",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"hit"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								},
								{
									"key": "card",
									"value": "2s"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Verify cards Double down",
			"item": [
				{
					"name": "getPlatformToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "262fd3ae-1cb5-452d-bd28-7050925506af",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"platform_token\", jsonData.data.platform_token);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e489adf-8851-495a-97d7-5f44adca032b",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"pm.environment.set(\"player_id_random\", player_id_random);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=eur&country=IT&language=en",
							"host": [
								"{{url}}"
							],
							"path": [
								"core",
								"helper",
								"getPlatformToken"
							],
							"query": [
								{
									"key": "gameName",
									"value": "tableBlackjack"
								},
								{
									"key": "player_id",
									"value": "{{player_id_random}}"
								},
								{
									"key": "currency",
									"value": "eur"
								},
								{
									"key": "country",
									"value": "IT"
								},
								{
									"key": "language",
									"value": "en",
									"description": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deal to recieved bet_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9062aacf-e483-45a2-b195-40c558a48972",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4a16f97-5cae-423d-a16f-d4992d2fe3b8",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "100",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "Qd"
								},
								{
									"key": "cards[0][1]",
									"value": "4c"
								},
								{
									"key": "dealer_cards[0]",
									"value": "10h",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "9c",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Double for new card and finished the game",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5792ea6-0e7c-463a-8fd5-1949b88d32aa",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"equal stake checking \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(jsonData.data.bets[1].stake);\r",
									"});\r",
									"\r",
									"pm.test(\"old Bet status = stood \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
									"});\r",
									"\r",
									"pm.test(\"new Bet status = stood \", function () {\r",
									"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"stood\");\r",
									"});\r",
									"\r",
									"pm.test(\"Bet type = double \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"double\");\r",
									"});\r",
									"\r",
									"pm.test(\"Bet type = standard \", function () {\r",
									"    pm.expect(jsonData.data.bets[1].type).to.deep.equal(\"standard\");\r",
									"});\r",
									"\r",
									"pm.test(\"Cards nominal cheking: 'Qd','4c','4d' \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].cards).to.deep.equal([\"Qd\",\"4c\",\"4d\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Number of cards cheking =3 \", function () {\r",
									"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Sum of cards value  = 18 \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(18);\r",
									"});\r",
									"\r",
									"pm.test(\"Value of cards at tooltip  = 18 \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].values_title).to.deep.equal(\"18\");\r",
									"});\r",
									"\r",
									"pm.test(\"Split is unavailable \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Double is available \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"bet2_id\", jsonData.data.bets[0].bet_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e680de0-c054-4e1f-a2a1-a4735a72ee8c",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/double?platform_token={{platform_token}}&bet_id={{bet1_id}}&card=4d",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"double"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								},
								{
									"key": "card",
									"value": "4d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify 2nd Bet creating",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8951e57f-6e2f-44c3-a052-d90a6dd526bb",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"equal stake checking \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(jsonData.data.bets[1].stake);\r",
									"});\r",
									"\r",
									"pm.test(\"old Bet status = stood \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
									"});\r",
									"\r",
									"pm.test(\"new Bet status = stood \", function () {\r",
									"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"stood\");\r",
									"});\r",
									"\r",
									"pm.test(\"Bet type = double \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"double\");\r",
									"});\r",
									"\r",
									"pm.test(\"Bet type = standard \", function () {\r",
									"    pm.expect(jsonData.data.bets[1].type).to.deep.equal(\"standard\");\r",
									"});\r",
									"\r",
									"pm.test(\"equal cards checking \", function () {\r",
									"    pm.expect(jsonData.data.bets[0].cards).to.deep.equal(jsonData.data.bets[1].cards);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9b540946-ce79-4c9e-9b8f-2fc21fa3d9a5",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/bets?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"bets"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Veriy Hit unavailability  after Double",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07c1f97c-c563-45d8-950d-f7e339d8d210",
								"exec": [
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = error \", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code = 1312 \", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
									"});\r",
									"\r",
									"pm.test(\"Sum of cards value  = 25 \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet1_id\") + \" has already stood\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0ddcbb9d-f2d4-4dbd-b25d-996fe0cb00b7",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"hit"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Veriy Hit unavailability  after Double (2nd bet)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8622871d-1ce9-4dad-8d98-e354ff4de430",
								"exec": [
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = error \", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code = 1312 \", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message = 'Bet with bet_id=... has already stood' \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet2_id\") + \" has already stood\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1aa52455-a592-4e44-bb79-20d31e778cdd",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet2_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"hit"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet2_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Split  unavailability after Double",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82b5c43d-ddfa-44ba-b8d5-24289e3e3037",
								"exec": [
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = error\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code = 1312\", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message = 'Bet with bet_id=10 has already stood'  \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet1_id\") + \" has already stood\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "98579001-04d7-45ac-bc27-2ec97141f560",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/split?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"split"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Split  unavailability after Double (2nd bet)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f29d202-cee3-457a-b9a0-d34c5b647713",
								"exec": [
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = error\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code = 1312\", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message = 'Bet with bet_id=10 has already stood'  \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet2_id\") + \" has already stood\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "62529acf-32c9-4a09-a026-27c8d8db9601",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/split?platform_token={{platform_token}}&bet_id={{bet2_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"split"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet2_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Double unavailability after Double",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24f15c4b-1b3d-4050-9bab-5fc19182cb48",
								"exec": [
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = error\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code = 1312\", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message = 'Bet with bet_id=10 has already stood'  \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet1_id\") + \" has already stood\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f4781580-e88c-4898-a58c-23762b442b4d",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/double?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"double"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Double unavailability after Double (2nd bet)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "773f9a78-3914-4889-8705-68ad02fe9e35",
								"exec": [
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = error\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code = 1312\", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message = 'Bet with bet_id=10 has already stood'  \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet2_id\") + \" has already stood\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8746e470-be54-4b2f-8a2f-af6e1176bf64",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/double?platform_token={{platform_token}}&bet_id={{bet2_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"double"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet2_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Stand unavailability after Double",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d09c8466-3816-4321-a2a5-595a4762b6f0",
								"exec": [
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = error\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code = 1312\", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message = 'Bet with bet_id=10 has already stood'  \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet1_id\") + \" has already stood\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7a6c651-773b-4b27-95a3-e02f44c1826b",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"stand"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Stand unavailability after Double (2nd bet)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "681fb2a2-d831-4950-bfbf-fea4e2a56322",
								"exec": [
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = error\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code = 1312\", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message = 'Bet with bet_id=10 has already stood'  \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet2_id\") + \" has already stood\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.environment.set(\"bet1_id\", \"\");\r",
									"pm.environment.set(\"bet2_id\", \"\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cb724b41-58d8-4b03-a825-2e4f79577e52",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet2_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"stand"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet2_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Verify cards Stand",
			"item": [
				{
					"name": "getPlatformToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1249afdc-ebd7-4bb6-ab28-2e4722dd4e9e",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"platform_token\", jsonData.data.platform_token);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "113847cc-6a92-4266-ad28-ed6ce6d3fab7",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"pm.environment.set(\"player_id_random\", player_id_random);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=eur&country=IT&language=en",
							"host": [
								"{{url}}"
							],
							"path": [
								"core",
								"helper",
								"getPlatformToken"
							],
							"query": [
								{
									"key": "gameName",
									"value": "tableBlackjack"
								},
								{
									"key": "player_id",
									"value": "{{player_id_random}}"
								},
								{
									"key": "currency",
									"value": "eur"
								},
								{
									"key": "country",
									"value": "IT"
								},
								{
									"key": "language",
									"value": "en",
									"description": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deal to recieved bet_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ae810ba-47c7-4c88-b971-5254b28525ec",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c624086-9251-4e93-9093-64bb36e6655e",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "100",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "Qd"
								},
								{
									"key": "cards[0][1]",
									"value": "4c"
								},
								{
									"key": "dealer_cards[0]",
									"value": "10h",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "9c",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Stand availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9b6e5a4-a359-4f57-bfdb-502de019ecc7",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Bet status code = stood\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
									"});\r",
									"\r",
									"pm.test(\"No new card is dealed\", function () {\r",
									"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Double unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Split unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that cards nominal is the same as at Deal\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].cards).to.deep.equal([\"Qd\",\"4c\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0dabf9ca-960a-40a6-b272-8e734f752905",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"stand"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Veriy Hit unavailability  after Stand",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "000f9b03-e4f7-4b81-a704-4e3ffb5d1afc",
								"exec": [
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = error \", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code = 1312 \", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
									"});\r",
									"\r",
									"pm.test(\"Sum of cards value  = 25 \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet1_id\") + \" has already stood\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9f83b55f-b228-4f90-9d9d-613413c491a5",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"hit"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Split  unavailability after Stand",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3974636c-8d2d-4bf5-9f9c-6ed4d70c0b90",
								"exec": [
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = error\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code = 1312\", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message = 'Bet with bet_id=10 has already stood'  \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet1_id\") + \" has already stood\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "324604b4-bb01-4bfd-a476-8b27f079ddab",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/split?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"split"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Double unavailability after Stand",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72bcc87d-6f34-45df-a215-2460481dfd2b",
								"exec": [
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = error\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code = 1312\", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message = 'Bet with bet_id=10 has already stood'  \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet1_id\") + \" has already stood\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bc233b35-4965-4ee9-becf-723dc5baceff",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/double?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"double"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify Stand unavailability after Stand",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4149482c-8966-4fbb-9802-d4c383676af9",
								"exec": [
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = error\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code = 1312\", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message = 'Bet with bet_id=10 has already stood'  \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet1_id\") + \" has already stood\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2ce64aa6-9c6a-42fb-aa77-7da4105fdf59",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"stand"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Verify Insuarance",
			"item": [
				{
					"name": "Insurance availability",
					"item": [
						{
							"name": "Insurance unavailability fo card with numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c60bf158-9cc6-4213-8151-a5ed727edcc4",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(false);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e78f3253-d649-425a-b4fa-e21488ea88d6",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "dealer_cards[0]",
											"value": "9c",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "Ac",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Insurance unavailability for card with number = 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6efe430-382d-4200-8b59-982c70b03d2d",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(false);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c8b371aa-8fb9-4831-a74b-970cab3fd3b4",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "dealer_cards[0]",
											"value": "10h",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "Ac",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Insurance unavailability for Higher cards",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96e841bc-7faf-423a-9343-b91376068621",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(false);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b7fb7f3e-8493-469d-a5bc-7e7c5c7e2081",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "dealer_cards[0]",
											"value": "Qs",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "Ac",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Insurance availability for Ac",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96913d2c-73b3-403c-93bc-5f8febb66314",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bf12d2ec-a2c0-4438-9e5f-5cdac0744102",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "dealer_cards[0]",
											"value": "Ac",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "As",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Insurance availability for As",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b05b519-d251-4d70-b04c-2748e96f4284",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "193ba30c-4b77-4029-b776-6b6bace3c3cb",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "dealer_cards[0]",
											"value": "As",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "10d",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Insurance availability for Ad",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3daec207-aac4-418a-87a2-dab8060437a8",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb1e0b6a-8b7e-4fdf-b046-487fe93a987b",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "dealer_cards[0]",
											"value": "Ad",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "Jh",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Insurance availability for Ah",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7980f9d9-861b-471d-b712-aa5eec2e93d6",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "38a90aff-2d36-44ac-a05d-ca0067338f7f",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "dealer_cards[0]",
											"value": "Ah",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "9s",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Insurance unavailability for false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2ce4cbe-f0d3-4d66-b6b4-12d4191daa68",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9ceacc21-61be-4a91-85f6-5f938f69837e",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "3d"
										},
										{
											"key": "cards[0][1]",
											"value": "4c"
										},
										{
											"key": "dealer_cards[0]",
											"value": "Qs",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "Ac",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify YES for Insurance wth false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5fdc0da3-c165-48f0-b475-86c20ef24271",
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1320\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1320);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Dealer's first card not equal an ace. Action not possible.'  \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Dealer's first card not equal an ace. Action not possible.\");\r",
											"});\r",
											"\r",
											"pm.environment.set(\"bet1_id\", \"\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b350bee3-b88e-4554-9a86-35062ef38e2a",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/insurance?platform_token={{platform_token}}&bet_id={{bet1_id}}&create_bet=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"insurance"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										},
										{
											"key": "create_bet",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "NO for insurance question",
					"item": [
						{
							"name": "getPlatformToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2aba5d6-6924-415e-9986-7f01b647db5c",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"platform_token\", jsonData.data.platform_token);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6ff9b682-bf89-464b-bf46-a11c5ee5e040",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"pm.environment.set(\"player_id_random\", player_id_random);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=eur&country=IT&language=en",
									"host": [
										"{{url}}"
									],
									"path": [
										"core",
										"helper",
										"getPlatformToken"
									],
									"query": [
										{
											"key": "gameName",
											"value": "tableBlackjack"
										},
										{
											"key": "player_id",
											"value": "{{player_id_random}}"
										},
										{
											"key": "currency",
											"value": "eur"
										},
										{
											"key": "country",
											"value": "IT"
										},
										{
											"key": "language",
											"value": "en",
											"description": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "deal to recieved bet_id for Insurance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e8d710e-4890-40c4-814c-a8a5ee160bc9",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e13a80e-1335-4438-a031-a04fdae820bd",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "100",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "6d"
										},
										{
											"key": "cards[0][1]",
											"value": "4c"
										},
										{
											"key": "dealer_cards[0]",
											"value": "As",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "5d",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify NO for Insurance (no new bets)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "924e592f-2adb-411f-b5fc-b5b4fc10b7e4",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet type = standard \", function () {\r",
											"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"standard\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status = insurance_asked\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"insurance_asked\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet stake (same) = 100\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(100);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"New bet isn't created\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(pm.environment.get(\"bet1_id\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2019540e-373b-4825-8cc7-44b740929bbd",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/insurance?platform_token={{platform_token}}&bet_id={{bet1_id}}&create_bet=false",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"insurance"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										},
										{
											"key": "create_bet",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify unavailability of insurance after refusing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4318a8eb-21d2-43d1-b269-1159a94c9aef",
										"exec": [
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1319\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1319);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'This bet has already asked for insurance. Action not possible.'  \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"This bet has already asked for insurance. Action not possible.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "786b03fa-c2fd-4b2a-8aa3-84dbb67d9e8a",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/insurance?platform_token={{platform_token}}&bet_id={{bet1_id}}&create_bet=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"insurance"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										},
										{
											"key": "create_bet",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "YES for insurance question",
					"item": [
						{
							"name": "getPlatformToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebc94a04-4760-4969-b282-e10b45f4fee8",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"platform_token\", jsonData.data.platform_token);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1dad3dbd-3bf7-474e-b8b6-00497d7fb8cd",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"pm.environment.set(\"player_id_random\", player_id_random);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=eur&country=IT&language=en",
									"host": [
										"{{url}}"
									],
									"path": [
										"core",
										"helper",
										"getPlatformToken"
									],
									"query": [
										{
											"key": "gameName",
											"value": "tableBlackjack"
										},
										{
											"key": "player_id",
											"value": "{{player_id_random}}"
										},
										{
											"key": "currency",
											"value": "eur"
										},
										{
											"key": "country",
											"value": "IT"
										},
										{
											"key": "language",
											"value": "en",
											"description": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "deal to recieved bet_id for Insurance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30ebde10-385c-4816-ad17-4f3b7a49f354",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83d16d1f-34b6-4150-8a94-8dc6d4665328",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "100",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "5h"
										},
										{
											"key": "cards[0][1]",
											"value": "3d"
										},
										{
											"key": "dealer_cards[0]",
											"value": "Ad",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "Jc",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "verify YES for Insurance (creating bets)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9fedd584-a87b-4e8f-a895-9b886153284e",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet type = insurance \", function () {\r",
											"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"insurance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet stake = 1/2 = 50\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(50);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"bet2_id\", jsonData.data.bets[0].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c4684fdb-429e-4a04-83a5-4a53d71de3d2",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/insurance?platform_token={{platform_token}}&bet_id={{bet1_id}}&create_bet=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"insurance"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										},
										{
											"key": "create_bet",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify unavaabilityof insurance for 2nd time",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec4da191-4e1f-4121-997b-3d3ddee1aff5",
										"exec": [
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1319\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1319);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'This bet has already asked for insurance. Action not possible.'  \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"This bet has already asked for insurance. Action not possible.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bcec9d0f-9de7-4064-8276-050243a11721",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/insurance?platform_token={{platform_token}}&bet_id={{bet1_id}}&create_bet=false",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"insurance"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										},
										{
											"key": "create_bet",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Dealer checking for insurance - have BJ",
					"item": [
						{
							"name": "DealerPeek - checking for BJ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e2aa2b6-c0cf-4c77-afa7-76f9c30aed27",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying for correct bet with insurance\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(pm.environment.get(\"bet2_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying there is only 2 bets existing\", function () {\r",
											"    pm.expect((jsonData.data.bets).length).to.deep.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying bet stake = 1/2 = 50\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(50);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying Dealer BJ\", function () {\r",
											"    pm.expect(jsonData.data.dealer_has_blackjack).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying winning\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"win\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying payout = 1/2 stake * 2 = 100\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].return).to.deep.equal(100);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status of insurance bet = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status of parent bet = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify outcome of parent bet = lose\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].outcome).to.deep.equal(\"lose\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "38d2f1ce-8249-4d6b-9219-653e64543cea",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/dealerPeek?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"dealerPeek"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Dealer checking for insurance - doesn't have BJ",
					"item": [
						{
							"name": "deal to recieved bet_id for Insurance without BJ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92ef2703-c6a8-4414-98bb-48159c9bb87f",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3facf6a7-d1ea-40ea-9c97-ca3ae08dcd04",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "100",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "Ah"
										},
										{
											"key": "cards[0][1]",
											"value": "5d"
										},
										{
											"key": "dealer_cards[0]",
											"value": "Ad",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "2c",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Dealer for BJ without insurance creating",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3945600-9c6d-4cd9-8749-e862ad133c65",
										"exec": [
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1322\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1322);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Not all bets asked for insurance. Action not possible'  \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Not all bets asked for insurance. Action not possible\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "00359bdb-b251-497e-a594-22e792f467e7",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/dealerPeek?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"dealerPeek"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Insurance bet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af2d002c-2388-4024-a819-a915ac07f2a3",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet type = insurance \", function () {\r",
											"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"insurance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet stake = 1/2 = 50\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(50);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"bet2_id\", jsonData.data.bets[0].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d447811-a4d2-4294-af50-60d1037606cf",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/insurance?platform_token={{platform_token}}&bet_id={{bet1_id}}&create_bet=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"insurance"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										},
										{
											"key": "create_bet",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DealerPeek - checking for BJ (doesn't has)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40d44326-e898-4078-aa57-f6a750882db1",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying for correct bet with insurance\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(pm.environment.get(\"bet2_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying there is only 1 bets existing\", function () {\r",
											"    pm.expect((jsonData.data.bets).length).to.deep.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying bet stake = 1/2 = 50\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(50);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying Dealer doesn't have BJ\", function () {\r",
											"    pm.expect(jsonData.data.dealer_has_blackjack).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying losing insurance bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"lose\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying payout for insurance = 0\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].return).to.deep.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status of insurance bet = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", \"\");\r",
											"pm.environment.set(\"bet2_id\", \"\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b810c833-72b8-4198-9507-85b82f9f838f",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/dealerPeek?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"dealerPeek"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Dealer checking for insurance - doesn't have 1st card Ace",
					"item": [
						{
							"name": "deal to recieved bet_id for Insurance without 1st card Ace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38568047-959f-48e0-a07e-79f7424bafe4",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e4dc4417-f375-4db0-b325-089f5a22d409",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "100",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "Ah"
										},
										{
											"key": "cards[0][1]",
											"value": "5d"
										},
										{
											"key": "dealer_cards[0]",
											"value": "10d",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "Kc",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DealerPeek - checking for BJ without 1st card Ace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "655358aa-8450-4f13-9208-044aa2f9abc3",
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1320\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1320);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Dealer's first card not equal an ace. Action not possible.'  \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Dealer's first card not equal an ace. Action not possible.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", \"\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d297c9d-1c01-4029-a5be-2042299fd783",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/dealerPeek?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"dealerPeek"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify insurance for all 3 hands",
					"item": [
						{
							"name": "deal for 3 hands to received bet_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a3c7691-f361-4753-b428-0e918767f2e7",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
											"pm.environment.set(\"bet2_id\", jsonData.data.bets[1].bet_id);\r",
											"pm.environment.set(\"bet3_id\", jsonData.data.bets[2].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "29e88eec-680a-44b0-86bb-a643b27dc808",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "Ah"
										},
										{
											"key": "cards[0][1]",
											"value": "5d"
										},
										{
											"key": "bets[1][stake]",
											"value": "20",
											"type": "text"
										},
										{
											"key": "cards[1][0]",
											"value": "6h"
										},
										{
											"key": "cards[1][1]",
											"value": "Ac"
										},
										{
											"key": "bets[2][stake]",
											"value": "30",
											"type": "text"
										},
										{
											"key": "cards[2][0]",
											"value": "10h"
										},
										{
											"key": "cards[2][1]",
											"value": "3s"
										},
										{
											"key": "dealer_cards[0]",
											"value": "Ad",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "2c",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "bets[1][hand_id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "bets[2][hand_id]",
											"value": "2",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Insurance bet for 1 hand",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41c83f4b-c540-4747-8a2c-2bf46d0fee33",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet type = insurance \", function () {\r",
											"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"insurance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet stake = 1/2 = 5\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(5);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "57fd0eee-c7dc-44cc-bbaf-b6af8573e9f9",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/insurance?platform_token={{platform_token}}&bet_id={{bet1_id}}&create_bet=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"insurance"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										},
										{
											"key": "create_bet",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Dealer for BJ without insurance creating for all hands",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d9122a4-601f-4342-b032-2fd980be3b96",
										"exec": [
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1322\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1322);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Not all bets asked for insurance. Action not possible'  \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Not all bets asked for insurance. Action not possible\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c6bcbc4f-e5e3-4838-8925-4c30b260e66c",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/dealerPeek?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"dealerPeek"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Insurance bet for 2 hand",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf0ff76b-56bd-4659-87ed-b919dc6c325b",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet type = insurance \", function () {\r",
											"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"insurance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet stake = 1/2 = 10\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(10);\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet2_id\", jsonData.data.bets[0].bet_id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6b3392e-601f-4adc-85b5-c9e600421f4b",
										"exec": [
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/insurance?platform_token={{platform_token}}&bet_id={{bet2_id}}&create_bet=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"insurance"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet2_id}}"
										},
										{
											"key": "create_bet",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Insurance bet for 3 hand",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac913a3c-6ebe-4838-88c3-0f09eef551e6",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet type = insurance \", function () {\r",
											"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"insurance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet stake = 1/2 = 15\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(15);\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet3_id\", jsonData.data.bets[0].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02298346-a8ab-457c-b037-78b723e72483",
										"exec": [
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/insurance?platform_token={{platform_token}}&bet_id={{bet3_id}}&create_bet=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"insurance"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet3_id}}"
										},
										{
											"key": "create_bet",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DealerPeek - checking for BJ (with insurance at all hands)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d66cf4ba-32dc-4bbf-8444-41a375fd9f7f",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verifying there are 3 bets existing\", function () {\r",
											"    pm.expect((jsonData.data.bets).length).to.deep.equal(3);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verifying insuranse bet_id\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(parseInt(pm.environment.get(\"bet1_id\"),10));\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying bet stake = 1/2 = 5\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(5);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying Dealer doesn't have BJ\", function () {\r",
											"    pm.expect(jsonData.data.dealer_has_blackjack).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying losing insurance bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"lose\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying payout for insurance = 0\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].return).to.deep.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status of insurance bet = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verifying insuranse bet_id\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].bet_id).to.deep.equal(parseInt(pm.environment.get(\"bet2_id\"),10));\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying bet stake = 1/2 = 10\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].stake).to.deep.equal(10);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying losing insurance bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].outcome).to.deep.equal(\"lose\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying payout for insurance = 0\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].return).to.deep.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status of insurance bet = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verifying insuranse bet_id\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].bet_id).to.deep.equal(parseInt(pm.environment.get(\"bet3_id\"),10));\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying bet stake = 1/2 = 15\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].stake).to.deep.equal(15);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying losing insurance bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].outcome).to.deep.equal(\"lose\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying payout for insurance = 0\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].return).to.deep.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status of insurance bet = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", \"\");\r",
											"pm.environment.set(\"bet2_id\", \"\");\r",
											"pm.environment.set(\"bet3_id\", \"\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2bb3ba6c-0926-47d5-8d6f-4f6ef45989e2",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/dealerPeek?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"dealerPeek"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify insurance not for all hands",
					"item": [
						{
							"name": "deal for 3 hands to received bet_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4172f2fb-888c-4cf2-a39e-11df8b2afd64",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Verify Insurance unavailability\", function () {\r",
											"    pm.expect(jsonData.data.dealer.askForInsurance).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
											"pm.environment.set(\"bet2_id\", jsonData.data.bets[1].bet_id);\r",
											"pm.environment.set(\"bet3_id\", jsonData.data.bets[2].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2db0db48-562a-4462-ae3d-f6bebd3c002e",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "Ah"
										},
										{
											"key": "cards[0][1]",
											"value": "5d"
										},
										{
											"key": "bets[1][stake]",
											"value": "20",
											"type": "text"
										},
										{
											"key": "cards[1][0]",
											"value": "6h"
										},
										{
											"key": "cards[1][1]",
											"value": "Ac"
										},
										{
											"key": "bets[2][stake]",
											"value": "30",
											"type": "text"
										},
										{
											"key": "cards[2][0]",
											"value": "10h"
										},
										{
											"key": "cards[2][1]",
											"value": "3s"
										},
										{
											"key": "dealer_cards[0]",
											"value": "Ad",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "Kc",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "bets[1][hand_id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "bets[2][hand_id]",
											"value": "2",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Insurance bet for 1 hand",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ade935c0-eff8-4d9c-976f-ea261310e4bf",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet type = insurance \", function () {\r",
											"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"insurance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet stake = 1/2 = 5\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(5);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74d39c70-c6e0-41dc-befa-68217b9d1b3b",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/insurance?platform_token={{platform_token}}&bet_id={{bet1_id}}&create_bet=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"insurance"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										},
										{
											"key": "create_bet",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Insurance bet for 2 hand",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "679a4cee-8b3a-48df-975d-c7ed60ddcd53",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet type = insurance \", function () {\r",
											"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"insurance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet stake = 1/2 = 10\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(10);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90597cfb-edce-4d78-96e6-6a5bbb2188ea",
										"exec": [
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/insurance?platform_token={{platform_token}}&bet_id={{bet2_id}}&create_bet=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"insurance"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet2_id}}"
										},
										{
											"key": "create_bet",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Dealer for BJ without insurance creating for all hands",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74323da9-ccd6-4221-bef4-df482d8fcc76",
										"exec": [
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = error\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code = 1322\", function () {\r",
											"    pm.expect(jsonData.errors[0].code).to.deep.equal(1322);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message = 'Not all bets asked for insurance. Action not possible'  \", function () {\r",
											"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Not all bets asked for insurance. Action not possible\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3b4e2fd9-57f6-419e-9812-25752ae8977a",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/dealerPeek?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"dealerPeek"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Denyed Insurance for 3rd hand",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfad67a9-31b1-4e9a-80bb-cb9ee0704773",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"No new bet created\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(pm.environment.get(\"bet3_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Bet type = standard \", function () {\r",
											"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"standard\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status = insurance_asked\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"insurance_asked\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet stake (same) = 30\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(30);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "85f48fce-45c7-48f7-94de-979616c62678",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/insurance?platform_token={{platform_token}}&bet_id={{bet3_id}}&create_bet=false",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"insurance"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet3_id}}"
										},
										{
											"key": "create_bet",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DealerPeek - checking for BJ (with insurance for 2 from3 hands)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3a64c1a-e60d-453a-8794-28b201869af0",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"//pm.test(\"Verifying for correct bet with insurance\", function () {\r",
											"//    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(pm.environment.get(\"bet2_id\"));\r",
											"//});\r",
											"\r",
											"pm.test(\"Verifying there is only 5 bets existing: 2 insurance + 3 parent\", function () {\r",
											"    pm.expect((jsonData.data.bets).length).to.deep.equal(5);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying Dealer BJ\", function () {\r",
											"    pm.expect(jsonData.data.dealer_has_blackjack).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verifying bet stake = 1/2 = 5\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(5);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying winning\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"win\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying payout = 1/2 stake * 2 = 10\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].return).to.deep.equal(10);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status of insurance bet = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify bet type = insurance\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"insurance\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verifying bet stake = 1/2 = 10\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].stake).to.deep.equal(10);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying winning\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].outcome).to.deep.equal(\"win\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying payout = 1/2 stake * 2 = 20\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].return).to.deep.equal(20);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status of insurance bet = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify bet type = insurance\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].type).to.deep.equal(\"insurance\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verifying losing of parent bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].outcome).to.deep.equal(\"lose\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying payout = 0\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].return).to.deep.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status of insurance bet = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify bet type = standard\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].type).to.deep.equal(\"standard\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verifying losing of parent bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[3].outcome).to.deep.equal(\"lose\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying payout = 0\", function () {\r",
											"    pm.expect(jsonData.data.bets[3].return).to.deep.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status of insurance bet = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[3].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify bet type = standard\", function () {\r",
											"    pm.expect(jsonData.data.bets[3].type).to.deep.equal(\"standard\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verifying losing of parent bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[4].outcome).to.deep.equal(\"lose\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verifying payout = 0\", function () {\r",
											"    pm.expect(jsonData.data.bets[4].return).to.deep.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status of insurance bet = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[4].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify bet type = standard\", function () {\r",
											"    pm.expect(jsonData.data.bets[4].type).to.deep.equal(\"standard\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", \"\");\r",
											"pm.environment.set(\"bet2_id\", \"\");\r",
											"pm.environment.set(\"bet3_id\", \"\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "761d26e4-aafa-4bb9-b8d0-b6b9cd23069d",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/dealerPeek?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"dealerPeek"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Payouts",
			"item": [
				{
					"name": "Verify Bust",
					"item": [
						{
							"name": "Player bust",
							"item": [
								{
									"name": "Verify unavaiability to player bust for the first deal",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01376f88-6f70-459d-a7d1-8f53a7abbcf3",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Value = [2, 12]\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].values).to.deep.equal([2, 12]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "edf2109d-8ce3-429e-99cd-2ac880b284f6",
												"exec": [
													"var player_id_random = Date.now();",
													"",
													"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
													"",
													"pm.sendRequest({",
													"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
													"    method: 'GET',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"    }",
													"}, function (err, res) {",
													"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "bets[0][stake]",
													"value": "100",
													"type": "text"
												},
												{
													"key": "cards[0][0]",
													"value": "Ah"
												},
												{
													"key": "cards[0][1]",
													"value": "Ad"
												},
												{
													"key": "dealer_cards[0]",
													"value": "2d",
													"description": "dealer"
												},
												{
													"key": "dealer_cards[1]",
													"value": "Ac",
													"description": "dealer"
												},
												{
													"key": "bets[0][hand_id]",
													"value": "0",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"deal"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "player deal for bust after Hit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b4c44c3-607c-4a43-9371-8e01586f3cce",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Value = 17\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].values).to.deep.equal([17]);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7adcaf3e-fb41-4324-937a-9a139577f4cb",
												"exec": [
													"var player_id_random = Date.now();",
													"",
													"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
													"",
													"pm.sendRequest({",
													"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
													"    method: 'GET',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"    }",
													"}, function (err, res) {",
													"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "bets[0][stake]",
													"value": "100",
													"type": "text"
												},
												{
													"key": "cards[0][0]",
													"value": "8h"
												},
												{
													"key": "cards[0][1]",
													"value": "9d"
												},
												{
													"key": "dealer_cards[0]",
													"value": "2d",
													"description": "dealer"
												},
												{
													"key": "dealer_cards[1]",
													"value": "Ac",
													"description": "dealer"
												},
												{
													"key": "bets[0][hand_id]",
													"value": "0",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"deal"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Hit for player Bust",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c3109bd-3410-4e44-8b6e-f1e0ace73478",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Bet status = completed \", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Sum of cards value  = 22 \", function () {\r",
													"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(22);\r",
													"});\r",
													"\r",
													"pm.test(\"Value of cards at tooltip  = 22 \", function () {\r",
													"    pm.expect(jsonData.data.bets[0].values_title).to.deep.equal(\"22\");\r",
													"});\r",
													"\r",
													"pm.test(\"Split is unavailable \", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Double is unavailable \", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Game result = player Bust \", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Win/lose result\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"lose\");\r",
													"});\r",
													"\r",
													"pm.test(\"Payout = 0\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].return).to.deep.equal(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bacbd67f-7f06-4a38-a799-db97ab4e1ffe",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet1_id}}&card=5s&bets[0][hand_id]=0",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"hit"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet1_id}}"
												},
												{
													"key": "card",
													"value": "5s"
												},
												{
													"key": "bets[0][hand_id]",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Dealer bust/Player win",
							"item": [
								{
									"name": "Deal for dealer A+A<player 10+3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57362dcd-695d-4d63-9c01-902b121263e2",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Value = 13\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(13);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4de759ca-b529-469f-a3e9-3dcde4597376",
												"exec": [
													"var player_id_random = Date.now();",
													"",
													"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
													"",
													"pm.sendRequest({",
													"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
													"    method: 'GET',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"    }",
													"}, function (err, res) {",
													"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "bets[0][stake]",
													"value": "100",
													"type": "text"
												},
												{
													"key": "cards[0][0]",
													"value": "10h"
												},
												{
													"key": "cards[0][1]",
													"value": "3d"
												},
												{
													"key": "dealer_cards[0]",
													"value": "Ad",
													"description": "dealer"
												},
												{
													"key": "dealer_cards[1]",
													"value": "Ac",
													"description": "dealer"
												},
												{
													"key": "bets[0][hand_id]",
													"value": "0",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"deal"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "verify NO for Insurance (no new bets)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9201c617-dea2-4225-b484-30ed5bfba57d",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet type = standard \", function () {\r",
													"    pm.expect(jsonData.data.bets[0].type).to.deep.equal(\"standard\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status = insurance_asked\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"insurance_asked\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet stake (same) = 100\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].stake).to.deep.equal(100);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"New bet isn't created\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(pm.environment.get(\"bet1_id\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ede94659-2520-4846-98c6-64d8ed1ebe8a",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/insurance?platform_token={{platform_token}}&bet_id={{bet1_id}}&create_bet=false",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"insurance"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet1_id}}"
												},
												{
													"key": "create_bet",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Stand for the player",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3cd2132-6de6-40c6-92ef-2ac0813c05ff",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status code = stood\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
													"});\r",
													"\r",
													"pm.test(\"No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ba0fec3d-5060-4224-8c20-c64a146e3a61",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet1_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"stand"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet1_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Dealer play = Bust, player won",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ce415cc-8dde-469a-9cfe-2e4db37a5f49",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"bet_id = current bet\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(pm.environment.get(\"bet1_id\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Payout = bet*2 = 200\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].return).to.deep.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Game result = win\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"win\");\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify dealer Bust\", function () {\r",
													"    pm.expect(jsonData.data.dealer.bust).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify dealer cards value = A(1)+A(1)+Q(10)+10 = 22\", function () {\r",
													"    pm.expect(jsonData.data.dealer.value).to.deep.equal(22);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"bet1_id\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "40a08889-dd35-4c2b-b04f-0db95f5b8c38",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/dealerPlay?platform_token={{platform_token}}&cards=Jd,10h,2c,3s,9d",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"dealerPlay"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "cards",
													"value": "Jd,10h,2c,3s,9d"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify dealer bust/all hands win",
							"item": [
								{
									"name": "Deal for dealer bust for 3 hands",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99c96015-e76d-4a71-8a5c-3506615e9d58",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Value for 1st hand = 17\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(17);\r",
													"});\r",
													"\r",
													"pm.test(\"Value for 2nd hand = 19\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(19);\r",
													"});\r",
													"\r",
													"pm.test(\"Value for 3rd hand = 18\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(18);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
													"\r",
													"pm.environment.set(\"bet2_id\", jsonData.data.bets[1].bet_id);\r",
													"\r",
													"pm.environment.set(\"bet3_id\", jsonData.data.bets[2].bet_id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e55ca3b9-b2bf-4e2b-8e4e-e962aad41a36",
												"exec": [
													"var player_id_random = Date.now();",
													"",
													"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
													"",
													"pm.sendRequest({",
													"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
													"    method: 'GET',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"    }",
													"}, function (err, res) {",
													"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "bets[0][stake]",
													"value": "10",
													"type": "text"
												},
												{
													"key": "cards[0][0]",
													"value": "10h"
												},
												{
													"key": "cards[0][1]",
													"value": "7d"
												},
												{
													"key": "bets[1][stake]",
													"value": "20",
													"type": "text"
												},
												{
													"key": "cards[1][0]",
													"value": "10d"
												},
												{
													"key": "cards[1][1]",
													"value": "9h"
												},
												{
													"key": "bets[2][stake]",
													"value": "30",
													"type": "text"
												},
												{
													"key": "cards[2][0]",
													"value": "10c"
												},
												{
													"key": "cards[2][1]",
													"value": "8s"
												},
												{
													"key": "dealer_cards[0]",
													"value": "9d",
													"description": "dealer"
												},
												{
													"key": "dealer_cards[1]",
													"value": "5c",
													"description": "dealer"
												},
												{
													"key": "bets[0][hand_id]",
													"value": "0",
													"type": "text"
												},
												{
													"key": "bets[1][hand_id]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "bets[2][hand_id]",
													"value": "2",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"deal"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Stand for the 1st hand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea6e3d42-e40d-4190-afc6-6be93481a9ab",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status code = stood\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
													"});\r",
													"\r",
													"pm.test(\"No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2acd6437-cd7b-4169-951e-e917d45cc9f2",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet1_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"stand"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet1_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Stand for the 2nd hand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76f59a13-321b-41a3-be9d-f2de059cb911",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status code = stood\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
													"});\r",
													"\r",
													"pm.test(\"No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e1960dae-1ad2-4ae3-891c-7528ddb9276a",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet2_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"stand"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet2_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Stand for the 3rd hand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22d32ddc-5b67-40eb-b89b-dda659b83b63",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status code = stood\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
													"});\r",
													"\r",
													"pm.test(\"No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0b62a046-49e2-49f7-8cfc-69433b96314d",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet3_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"stand"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet3_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Dealer play = Bust, 2 player hands won+1 player hand bust",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32e67d5b-79c8-49c1-be84-caddf41ec455",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: bet_id = current bet\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(pm.environment.get(\"bet1_id\"));\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Payout = bet*2 = 20\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].return).to.deep.equal(20);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Game result = win\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"win\");\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"2nd hand: bet_id = current bet\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].bet_id).to.deep.equal(pm.environment.get(\"bet2_id\"));\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[1].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Payout = bet*2 = 40\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].return).to.deep.equal(40);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Game result = win\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].outcome).to.deep.equal(\"win\");\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"3rd hand: bet_id = current bet\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].bet_id).to.deep.equal(pm.environment.get(\"bet3_id\"));\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[2].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Payout = bet*2 = 60\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].return).to.deep.equal(60);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Game result = win\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].outcome).to.deep.equal(\"win\");\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify dealer Bust\", function () {\r",
													"    pm.expect(jsonData.data.dealer.bust).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify dealer cards value = 9+5+8 = 22\", function () {\r",
													"    pm.expect(jsonData.data.dealer.value).to.deep.equal(22);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"bet1_id\", \"\");\r",
													"pm.environment.set(\"bet2_id\", \"\");\r",
													"pm.environment.set(\"bet3_id\", \"\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "75547ee0-8016-42e2-9431-054a98de84c2",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/dealerPlay?platform_token={{platform_token}}&cards=8s,9s,2c,3s,9d",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"dealerPlay"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "cards",
													"value": "8s,9s,2c,3s,9d"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify dealer bust: 2 hands win + 1 lose",
							"item": [
								{
									"name": "Deal for dealer bust for 2 hands",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d053c3d5-c40f-4d2f-9132-fab65472a1a2",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Value for 1st hand = 17\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(17);\r",
													"});\r",
													"\r",
													"pm.test(\"Value for 2nd hand = 19\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(19);\r",
													"});\r",
													"\r",
													"pm.test(\"Value for 3rd hand = 18\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(18);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
													"\r",
													"pm.environment.set(\"bet2_id\", jsonData.data.bets[1].bet_id);\r",
													"\r",
													"pm.environment.set(\"bet3_id\", jsonData.data.bets[2].bet_id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8e75cfb8-c096-423c-9b97-ac1c0c2115d0",
												"exec": [
													"var player_id_random = Date.now();",
													"",
													"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
													"",
													"pm.sendRequest({",
													"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
													"    method: 'GET',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"    }",
													"}, function (err, res) {",
													"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "bets[0][stake]",
													"value": "10",
													"type": "text"
												},
												{
													"key": "cards[0][0]",
													"value": "10h"
												},
												{
													"key": "cards[0][1]",
													"value": "7d"
												},
												{
													"key": "bets[1][stake]",
													"value": "20",
													"type": "text"
												},
												{
													"key": "cards[1][0]",
													"value": "10d"
												},
												{
													"key": "cards[1][1]",
													"value": "9h"
												},
												{
													"key": "bets[2][stake]",
													"value": "30",
													"type": "text"
												},
												{
													"key": "cards[2][0]",
													"value": "10c"
												},
												{
													"key": "cards[2][1]",
													"value": "8s"
												},
												{
													"key": "dealer_cards[0]",
													"value": "9d",
													"description": "dealer"
												},
												{
													"key": "dealer_cards[1]",
													"value": "5c",
													"description": "dealer"
												},
												{
													"key": "bets[0][hand_id]",
													"value": "0",
													"type": "text"
												},
												{
													"key": "bets[1][hand_id]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "bets[2][hand_id]",
													"value": "2",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"deal"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Stand for the 1st hand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96157915-f2aa-4ba9-8656-4e026960f369",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status code = stood\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
													"});\r",
													"\r",
													"pm.test(\"No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e71bb555-d78c-41b6-9ad9-558115969a51",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet1_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"stand"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet1_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Stand for the 2nd hand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "654015f7-c9a8-4f8d-9c66-b4efff2ac280",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status code = stood\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
													"});\r",
													"\r",
													"pm.test(\"No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2041660a-bcb1-4865-93cd-beb4ce87d929",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet2_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"stand"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet2_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Hit and Bust for the 3rd hand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "164b4726-b9aa-41ce-b212-befac4000dc2",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet outcome = lose\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"lose\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"New card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(3);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dd39e589-82a1-48fe-a898-682c9e2d3768",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet3_id}}&card=4d",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"hit"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet3_id}}"
												},
												{
													"key": "card",
													"value": "4d"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Dealer play = Bust, 2 player hands won+1 player hand bust",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0b9bda1-ced2-455e-89cb-4f5ea33321aa",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"No 3d hand bet\", function () {\r",
													"    pm.expect((jsonData.data.bets).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"1st hand: bet_id = current bet\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(pm.environment.get(\"bet1_id\"));\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Payout = bet*2 = 20\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].return).to.deep.equal(20);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Game result = win\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"win\");\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"2nd hand: bet_id = current bet\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].bet_id).to.deep.equal(pm.environment.get(\"bet2_id\"));\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[1].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Payout = bet*2 = 40\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].return).to.deep.equal(40);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Game result = win\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].outcome).to.deep.equal(\"win\");\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Verify dealer Bust\", function () {\r",
													"    pm.expect(jsonData.data.dealer.bust).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify dealer cards value = 9+5+8 = 22\", function () {\r",
													"    pm.expect(jsonData.data.dealer.value).to.deep.equal(22);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"bet1_id\", \"\");\r",
													"pm.environment.set(\"bet2_id\", \"\");\r",
													"pm.environment.set(\"bet3_id\", \"\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4baade46-05be-40f2-a780-79fc5aacecf9",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/dealerPlay?platform_token={{platform_token}}&cards=8s,9s,2c,3s,9d",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"dealerPlay"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "cards",
													"value": "8s,9s,2c,3s,9d"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify Push",
					"item": [
						{
							"name": "Deal for Push",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b80d050-3933-4e38-a769-d571e17c5091",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Bust = false\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Value for 1st hand = 20\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(20);\r",
											"});\r",
											"\r",
											"pm.test(\"Value for 2nd hand = 19\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(19);\r",
											"});\r",
											"\r",
											"pm.test(\"Value for 3rd hand = 18\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(18);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
											"\r",
											"pm.environment.set(\"bet2_id\", jsonData.data.bets[1].bet_id);\r",
											"\r",
											"pm.environment.set(\"bet3_id\", jsonData.data.bets[2].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c17cf08-41c9-46c5-9ca1-74244dafcfb4",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
											"",
											"pm.sendRequest({",
											"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "10h"
										},
										{
											"key": "cards[0][1]",
											"value": "Qh"
										},
										{
											"key": "bets[1][stake]",
											"value": "20",
											"type": "text"
										},
										{
											"key": "cards[1][0]",
											"value": "10d"
										},
										{
											"key": "cards[1][1]",
											"value": "9d"
										},
										{
											"key": "bets[2][stake]",
											"value": "30",
											"type": "text"
										},
										{
											"key": "cards[2][0]",
											"value": "10c"
										},
										{
											"key": "cards[2][1]",
											"value": "8c"
										},
										{
											"key": "dealer_cards[0]",
											"value": "9s",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "10s",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "bets[1][hand_id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "bets[2][hand_id]",
											"value": "2",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stand for the 1st hand - win",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7e8e0f5-a115-49ec-8418-4aa9358ba736",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status code = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"pm.test(\"No new card is dealed\", function () {\r",
											"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Double unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Split unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Bust unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fbd3e377-dbf2-41fb-930d-8dfe0386a0b9",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"stand"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stand for the 2nd hand - push",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe80f046-d088-4ce9-b708-97d88b57241f",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status code = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"pm.test(\"No new card is dealed\", function () {\r",
											"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Double unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Split unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Bust unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2ce306f-4626-4c6f-b754-a9ca8e78be90",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet2_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"stand"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet2_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stand for the 3rd hand - lose",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04029161-5613-4836-9da2-26ff506df9b3",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status code = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"pm.test(\"No new card is dealed\", function () {\r",
											"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Double unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Split unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Bust unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d520da43-8961-4bfc-bd69-0a82b96b61ae",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet3_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"stand"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet3_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Play for: 1st hand Win + 2nd hand Push + 3rd hand lose",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "602cefc1-632f-460e-87a1-6f6c932e9e93",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"All 3 hands bet are played\", function () {\r",
											"    pm.expect((jsonData.data.bets).length).to.deep.equal(3);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"1st hand: bet_id = current bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(pm.environment.get(\"bet1_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: Bet status code = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: No new card is dealed\", function () {\r",
											"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: Payout = bet*2 = 20\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].return).to.deep.equal(20);\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: Game result = win\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"win\");\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: Verify Double unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: Verify Split unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"2nd hand: bet_id = current bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].bet_id).to.deep.equal(pm.environment.get(\"bet2_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: Bet status code = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: No new card is dealed\", function () {\r",
											"    pm.expect((jsonData.data.bets[1].cards).length).to.deep.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: Payout = bet = 20\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].return).to.deep.equal(20);\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: Game result = push\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].outcome).to.deep.equal(\"push\");\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: Verify Double unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].canDouble).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: Verify Split unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"3rd hand: bet_id = current bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].bet_id).to.deep.equal(pm.environment.get(\"bet3_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: Bet status code = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: No new card is dealed\", function () {\r",
											"    pm.expect((jsonData.data.bets[2].cards).length).to.deep.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: Payout = 0\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].return).to.deep.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: Game result = lose\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].outcome).to.deep.equal(\"lose\");\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: Verify Double unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].canDouble).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: Verify Split unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify dealer Bust\", function () {\r",
											"    pm.expect(jsonData.data.dealer.bust).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify dealer has 21\", function () {\r",
											"    pm.expect(jsonData.data.dealer.has21).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify dealer cards value = 9+10 = 19\", function () {\r",
											"    pm.expect(jsonData.data.dealer.value).to.deep.equal(19);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"bet1_id\", \"\");\r",
											"pm.environment.set(\"bet2_id\", \"\");\r",
											"pm.environment.set(\"bet3_id\", \"\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c67ceeb-6f90-4506-acc5-ade8c22b8712",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/dealerPlay?platform_token={{platform_token}}&cards=8s,9s,2c,3s,9d",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"dealerPlay"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "cards",
											"value": "8s,9s,2c,3s,9d"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify BJ",
					"item": [
						{
							"name": "BJ vs BJ = push/21 vs BJ = lose",
							"item": [
								{
									"name": "Deal for  player/dealer BJ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b783f65-9591-4965-bc1c-b1512d99eb5c",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Value for 1st hand = 15\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(15);\r",
													"});\r",
													"\r",
													"pm.test(\"BJ for 1st hand = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"21 for 1st hand = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: canDouble = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: canSplit = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Value for 2nd hand = 16\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(16);\r",
													"});\r",
													"\r",
													"pm.test(\"BJ for 2nd hand = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].hasBJ).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"21 for 2nd hand = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].has21).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: canDouble = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canDouble).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: canSplit = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Value for 3rd hand = 21\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(21);\r",
													"});\r",
													"\r",
													"pm.test(\"BJ for 3rd hand = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].hasBJ).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"21 for 3rd hand = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: canDouble = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: canSplit = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
													"\r",
													"pm.environment.set(\"bet2_id\", jsonData.data.bets[1].bet_id);\r",
													"\r",
													"pm.environment.set(\"bet3_id\", jsonData.data.bets[2].bet_id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "35e953e3-72fc-46a6-99b7-672244080038",
												"exec": [
													"var player_id_random = Date.now();",
													"",
													"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
													"",
													"pm.sendRequest({",
													"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
													"    method: 'GET',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"    }",
													"}, function (err, res) {",
													"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "bets[0][stake]",
													"value": "10",
													"type": "text"
												},
												{
													"key": "cards[0][0]",
													"value": "10h"
												},
												{
													"key": "cards[0][1]",
													"value": "5h"
												},
												{
													"key": "bets[1][stake]",
													"value": "20",
													"type": "text"
												},
												{
													"key": "cards[1][0]",
													"value": "10d"
												},
												{
													"key": "cards[1][1]",
													"value": "6d"
												},
												{
													"key": "bets[2][stake]",
													"value": "30",
													"type": "text"
												},
												{
													"key": "cards[2][0]",
													"value": "10c"
												},
												{
													"key": "cards[2][1]",
													"value": "Ac"
												},
												{
													"key": "dealer_cards[0]",
													"value": "10s",
													"description": "dealer"
												},
												{
													"key": "dealer_cards[1]",
													"value": "As",
													"description": "dealer"
												},
												{
													"key": "bets[0][hand_id]",
													"value": "0",
													"type": "text"
												},
												{
													"key": "bets[1][hand_id]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "bets[2][hand_id]",
													"value": "2",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"deal"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Hit for the 1st hand to has 21 - lose",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b8f1101-253b-4edc-98b3-9a0401416f4c",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status code = stood\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
													"});\r",
													"\r",
													"pm.test(\"New card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(3);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify has21 = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify hasBJ = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(false);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b6a04ce4-4df5-416a-b8a2-8318f5fffe63",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet1_id}}&card=6h",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"hit"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet1_id}}"
												},
												{
													"key": "card",
													"value": "6h"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Double Down for the 2nd hand to has 21 - lose",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "273fc6d0-6a63-4668-8040-239a0a99927c",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status code = stood\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
													"});\r",
													"\r",
													"pm.test(\"New card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(3);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify has21 = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify hasBJ = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(false);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f745f6ba-83ca-4b89-a38e-5620bd203fbb",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/double?platform_token={{platform_token}}&bet_id={{bet2_id}}&card=5d",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"double"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet2_id}}"
												},
												{
													"key": "card",
													"value": "5d"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Play for: 1st & 2nd hands lose + 3rd hand Push",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e7d0bed-899e-4d5a-82e6-6d7431ef896f",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"All 3 hands bet are played\", function () {\r",
													"    pm.expect((jsonData.data.bets).length).to.deep.equal(4);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"1st hand: bet_id = current bet\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(pm.environment.get(\"bet1_id\"));\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Payout = 0\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].return).to.deep.equal(0);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Game result = lose\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"lose\");\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Verify has21 = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Verify hasBJ = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"2nd hand: bet_id = current bet\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].bet_id).to.deep.equal(pm.environment.get(\"bet2_id\"));\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Payout = 0\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].return).to.deep.equal(0);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Game result = lose\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].outcome).to.deep.equal(\"lose\");\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Verify has21 = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Verify hasBJ = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].hasBJ).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"3rd hand: bet_id = current bet\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].bet_id).to.deep.equal(pm.environment.get(\"bet3_id\"));\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[2].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Payout = 30\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].return).to.deep.equal(30);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Game result = push\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].outcome).to.deep.equal(\"push\");\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Verify has21 = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"3dr hand: Verify hasBJ = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].hasBJ).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Verify dealer Bust\", function () {\r",
													"    pm.expect(jsonData.data.dealer.bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify dealer has 21\", function () {\r",
													"    pm.expect(jsonData.data.dealer.has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify dealer cards value = 10+A = 21\", function () {\r",
													"    pm.expect(jsonData.data.dealer.value).to.deep.equal(21);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"bet1_id\", \"\");\r",
													"pm.environment.set(\"bet2_id\", \"\");\r",
													"pm.environment.set(\"bet3_id\", \"\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "338f46d1-054a-43f2-967e-b576e46cbb1c",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/dealerPlay?platform_token={{platform_token}}&cards=8s,9s,2c,3s,9d",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"dealerPlay"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "cards",
													"value": "8s,9s,2c,3s,9d"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "player BJ vs dealer 21 = win",
							"item": [
								{
									"name": "Deal for  player BJ/Hit/Split",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b895d0b8-0dc7-4490-8f0a-0f5a7c984587",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Value for 1st hand = 21\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(21);\r",
													"});\r",
													"\r",
													"pm.test(\"BJ for 1st hand = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"21 for 1st hand = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: canDouble = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: canSplit = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Value for 2nd hand = 12\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(12);\r",
													"});\r",
													"\r",
													"pm.test(\"BJ for 2nd hand = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].hasBJ).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"21 for 2nd hand = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].has21).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: canDouble = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canDouble).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: canSplit = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Value for 3rd hand = 20\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(20);\r",
													"});\r",
													"\r",
													"pm.test(\"BJ for 3rd hand = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].hasBJ).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"21 for 3rd hand = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].has21).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: canDouble = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canDouble).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: canSplit = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canSplit).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
													"\r",
													"pm.environment.set(\"bet2_id\", jsonData.data.bets[1].bet_id);\r",
													"\r",
													"pm.environment.set(\"bet3_id\", jsonData.data.bets[2].bet_id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "818c1253-20d5-4bd6-81c1-f440684aa6f5",
												"exec": [
													"var player_id_random = Date.now();",
													"",
													"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
													"",
													"pm.sendRequest({",
													"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
													"    method: 'GET',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"    }",
													"}, function (err, res) {",
													"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "bets[0][stake]",
													"value": "10",
													"type": "text"
												},
												{
													"key": "cards[0][0]",
													"value": "10h"
												},
												{
													"key": "cards[0][1]",
													"value": "Ah"
												},
												{
													"key": "bets[1][stake]",
													"value": "20",
													"type": "text"
												},
												{
													"key": "cards[1][0]",
													"value": "10d"
												},
												{
													"key": "cards[1][1]",
													"value": "2d"
												},
												{
													"key": "bets[2][stake]",
													"value": "30",
													"type": "text"
												},
												{
													"key": "cards[2][0]",
													"value": "10c"
												},
												{
													"key": "cards[2][1]",
													"value": "Kc"
												},
												{
													"key": "dealer_cards[0]",
													"value": "10s",
													"description": "dealer"
												},
												{
													"key": "dealer_cards[1]",
													"value": "3s",
													"description": "dealer"
												},
												{
													"key": "bets[0][hand_id]",
													"value": "0",
													"type": "text"
												},
												{
													"key": "bets[1][hand_id]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "bets[2][hand_id]",
													"value": "2",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"deal"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Hit for the 2nd hand - 21 for push",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fca8d675-4cc5-445f-a49a-8403f024a9bc",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status code = stood\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
													"});\r",
													"\r",
													"pm.test(\"New card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(3);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 21 = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify BJ = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e414f802-bcf4-4205-b8bb-2fb282d8cc9b",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet2_id}}&card=9d",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"hit"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet2_id}}"
												},
												{
													"key": "card",
													"value": "9d"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "unavailability for Stand 2nd hand with 21",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d903b36c-8654-4a1b-aab0-f375bd045ff2",
												"exec": [
													"\r",
													"pm.test(\"Status code is 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = error\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error code = 1312\", function () {\r",
													"    pm.expect(jsonData.errors[0].code).to.deep.equal(1312);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message = 'Bet with bet_id=.... has already stood'  \", function () {\r",
													"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Bet with bet_id=\" + pm.environment.get(\"bet2_id\") + \" has already stood\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "daa41cec-22c0-4c45-a43b-3f9f39611948",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet2_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"stand"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet2_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Split for the 3rd hand - 1 lose/1BJ with payout 1:1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "098d0484-6ad3-4ba0-bd2b-abf8959665f6",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"new bet: Bet status code = accepted\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"accepted\");\r",
													"});\r",
													"\r",
													"pm.test(\"new bet: No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(1);\r",
													"});\r",
													"\r",
													"pm.test(\"new bet: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"new bet: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"new bet: Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"parent bet: Bet status code = stood\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"stood\");\r",
													"});\r",
													"\r",
													"pm.test(\"parent bet: New card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[1].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"parent bet: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"parent bet: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"parent bet: Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"parent bet: Value = 21\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(21);\r",
													"});\r",
													"\r",
													"pm.test(\"parent bet: Verify has 21 = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"parent bet: Verify has BJ = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].hasBJ).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b47aea7f-7898-45dd-a879-843e73ae4acc",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/split?platform_token={{platform_token}}&bet_id={{bet3_id}}&cards=Ac",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"split"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet3_id}}"
												},
												{
													"key": "cards",
													"value": "Ac"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Hit for the new split bet for 3rd hand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bfbec1ea-ffe2-477a-9235-588d3d8175af",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status code = accepted\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"accepted\");\r",
													"});\r",
													"\r",
													"pm.test(\"New card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Double availability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Value = 20\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(20);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify has 21 = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify has BJ = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(false);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "30f16c08-74c3-4a42-8a9b-d63a01ac49c5",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/hit?platform_token={{platform_token}}&bet_id={{bet1_id}}&card=Jc",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"hit"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet1_id}}"
												},
												{
													"key": "card",
													"value": "Jc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Stand new bet after Split",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "137f1e53-1d41-4365-8eb1-c8bec0e93de2",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Bet status code = stood\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Bust unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Value = 20\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(20);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify has 21 = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify has BJ = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(false);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4185a12c-82dd-438d-92fd-5bbb09c7ba84",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet1_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"stand"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "bet_id",
													"value": "{{bet1_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Play for: 1st hand Win + 2nd hand Push + 3rd hand (parent with BJ push + new lose)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48727a17-69bd-48ee-a75c-f234d2073752",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"All 3 hands bet are played\", function () {\r",
													"    pm.expect((jsonData.data.bets).length).to.deep.equal(4);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"1st hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Payout = bet*3/2 = 15+10\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].return).to.deep.equal(25);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Game result = win\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"win\");\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: has 21 = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: has BJ true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"2nd hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Value = 21\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(21);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Payout = bet = 20\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].return).to.deep.equal(20);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Game result = push\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].outcome).to.deep.equal(\"push\");\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: has 21 = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: has BJ = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].hasBJ).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"3rd hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Value = 21\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(21);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Payout = bet = 30\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].return).to.deep.equal(30);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Game result = push\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].outcome).to.deep.equal(\"push\");\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: has 21 = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: has BJ = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].hasBJ).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"new bet for 3rd hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[3].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"new bet for 3rd hand: Value = 20\", function () {\r",
													"    pm.expect(jsonData.data.bets[3].value).to.deep.equal(20);\r",
													"});\r",
													"\r",
													"pm.test(\"new bet for 3rd hand: Payout = 0\", function () {\r",
													"    pm.expect(jsonData.data.bets[3].return).to.deep.equal(0);\r",
													"});\r",
													"\r",
													"pm.test(\"new bet for 3rd hand: Game result = lose\", function () {\r",
													"    pm.expect(jsonData.data.bets[3].outcome).to.deep.equal(\"lose\");\r",
													"});\r",
													"\r",
													"pm.test(\"new bet for 3rd hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[3].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"new bet for 3rd hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[3].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"new bet for 3rd hand: has 21 = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[3].has21).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"new bet for 3rd hand: has BJ = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[3].hasBJ).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Verify dealer Bust\", function () {\r",
													"    pm.expect(jsonData.data.dealer.bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify dealer has 21\", function () {\r",
													"    pm.expect(jsonData.data.dealer.has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify dealer cards value = 10+3+8 = 21\", function () {\r",
													"    pm.expect(jsonData.data.dealer.value).to.deep.equal(21);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"bet1_id\", \"\");\r",
													"pm.environment.set(\"bet2_id\", \"\");\r",
													"pm.environment.set(\"bet3_id\", \"\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "372b08b4-8a2f-48e9-a4f2-a97a81a5871e",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/dealerPlay?platform_token={{platform_token}}&cards=8s,9s,2c,3s,9d",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"dealerPlay"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "cards",
													"value": "8s,9s,2c,3s,9d"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Dealer don't take new card if all hands have BJ",
							"item": [
								{
									"name": "Deal for  all player han have BJ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a9d89ff-9a20-471a-9bee-78ecc3144566",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Value for 1st hand = 21\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(21);\r",
													"});\r",
													"\r",
													"pm.test(\"BJ for 1st hand = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"21 for 1st hand = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: canDouble = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: canSplit = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Status for 1st hand = stod\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Value for 2nd hand = 21\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(21);\r",
													"});\r",
													"\r",
													"pm.test(\"BJ for 2nd hand = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].hasBJ).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"21 for 2nd hand = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: canDouble = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: canSplit = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Status for 2nd hand = stod\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"stood\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Value for 3rd hand = 21\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(21);\r",
													"});\r",
													"\r",
													"pm.test(\"BJ for 3rd hand = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].hasBJ).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"21 for 3rd hand = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Bust = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: canDouble = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: canSplit = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Status for 3rd hand = stod\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].status).to.deep.equal(\"stood\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "422694de-4edd-4512-b362-7834066afd65",
												"exec": [
													"var player_id_random = Date.now();",
													"",
													"postman.setEnvironmentVariable(\"player_id_random\", player_id_random);",
													"",
													"pm.sendRequest({",
													"    url: pm.globals.get(\"url\") + '/core/helper/getPlatformToken?gameName=tableBlackjack&player_id=' + pm.environment.get(\"player_id_random\") + '&currency=eur&country=IT&language=en',",
													"    method: 'GET',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"    }",
													"}, function (err, res) {",
													"    pm.environment.set(\"platform_token\", res.json().data.platform_token);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "bets[0][stake]",
													"value": "10",
													"type": "text"
												},
												{
													"key": "cards[0][0]",
													"value": "10h"
												},
												{
													"key": "cards[0][1]",
													"value": "Ah"
												},
												{
													"key": "bets[1][stake]",
													"value": "20",
													"type": "text"
												},
												{
													"key": "cards[1][0]",
													"value": "10d"
												},
												{
													"key": "cards[1][1]",
													"value": "Ad"
												},
												{
													"key": "bets[2][stake]",
													"value": "30",
													"type": "text"
												},
												{
													"key": "cards[2][0]",
													"value": "10c"
												},
												{
													"key": "cards[2][1]",
													"value": "Ac"
												},
												{
													"key": "dealer_cards[0]",
													"value": "10s",
													"description": "dealer"
												},
												{
													"key": "dealer_cards[1]",
													"value": "3s",
													"description": "dealer"
												},
												{
													"key": "bets[0][hand_id]",
													"value": "0",
													"type": "text"
												},
												{
													"key": "bets[1][hand_id]",
													"value": "1",
													"type": "text"
												},
												{
													"key": "bets[2][hand_id]",
													"value": "2",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"deal"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Play for all hands won with BJ and dealer don't take new card",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee9cb29f-57b3-452c-8af1-1717630fe4f8",
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"pm.test(\"Status = success\", function () {\r",
													"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"All 3 hands bet are played\", function () {\r",
													"    pm.expect((jsonData.data.bets).length).to.deep.equal(3);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"1st hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Payout = bet*3/2 = 15+10\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].return).to.deep.equal(25);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Game result = win\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"win\");\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: has 21 = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"1st hand: has BJ true\", function () {\r",
													"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"2nd hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[1].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Value = 21\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(21);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Payout = bet*3/2 = 30+20\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].return).to.deep.equal(50);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Game result = win\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].outcome).to.deep.equal(\"win\");\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: has 21 = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"2nd hand: has BJ = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[1].hasBJ).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"3rd hand: Bet status code = completed\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].status).to.deep.equal(\"completed\");\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: No new card is dealed\", function () {\r",
													"    pm.expect((jsonData.data.bets[2].cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Value = 21\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(21);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Payout = bet*3/2 = 45+30\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].return).to.deep.equal(75);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Game result = win\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].outcome).to.deep.equal(\"win\");\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Verify Double unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canDouble).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: Verify Split unavailability\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].canSplit).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: has 21 = true\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].has21).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"pm.test(\"3rd hand: has BJ = false\", function () {\r",
													"    pm.expect(jsonData.data.bets[2].hasBJ).to.deep.equal(true);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Verify dealer Bust\", function () {\r",
													"    pm.expect(jsonData.data.dealer.bust).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify dealer has 21\", function () {\r",
													"    pm.expect(jsonData.data.dealer.has21).to.deep.equal(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify dealer cards value = 10+3 = 13\", function () {\r",
													"    pm.expect(jsonData.data.dealer.value).to.deep.equal(13);\r",
													"});\r",
													"\r",
													"pm.test(\"Dealer don't take new card\", function () {\r",
													"    pm.expect((jsonData.data.dealer.cards).length).to.deep.equal(2);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "582ca3ab-41d2-4abd-a984-f64d350931e2",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{url}}/tableBlackjack/game/dealerPlay?platform_token={{platform_token}}&cards=8s,9s,2c,3s,9d",
											"host": [
												"{{url}}"
											],
											"path": [
												"tableBlackjack",
												"game",
												"dealerPlay"
											],
											"query": [
												{
													"key": "platform_token",
													"value": "{{platform_token}}"
												},
												{
													"key": "cards",
													"value": "8s,9s,2c,3s,9d"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Balance checking",
					"item": [
						{
							"name": "getPlatformToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e805152d-301c-41de-b6af-d62040b1bc2a",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"platform_token\", jsonData.data.platform_token);\r",
											"\r",
											"pm.environment.set(\"AdminPanel_pass\", pm.globals.get(\"AdminPanel_password\"));\r",
											"\r",
											"console.log('cookies:  ' + pm.environment.get(\"AdminPanel_cookies\") + ', password:  ' + pm.environment.get(\"AdminPanel_pass\") + ', login:  ' + pm.environment.get(\"AdminPanel_login\") + ', player_id:  ' + pm.environment.get(\"player_id_random\"));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "085277cd-6127-41c6-ae61-168e819b19ee",
										"exec": [
											"var player_id_random = Date.now();",
											"",
											"pm.environment.set(\"player_id_random\", player_id_random);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=eur&country=IT&language=en",
									"host": [
										"{{url}}"
									],
									"path": [
										"core",
										"helper",
										"getPlatformToken"
									],
									"query": [
										{
											"key": "gameName",
											"value": "tableBlackjack"
										},
										{
											"key": "player_id",
											"value": "{{player_id_random}}"
										},
										{
											"key": "currency",
											"value": "eur"
										},
										{
											"key": "country",
											"value": "IT"
										},
										{
											"key": "language",
											"value": "en",
											"description": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPlayerToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d67a0189-0768-44cd-adcc-4908c3e90d4f",
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
											"\r",
											"\r",
											"pm.environment.set(\"player_token\", jsonData.data.player_token);\r",
											"\r",
											"pm.environment.set(\"player_platform_id\", jsonData.data.player_platform_id);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/wallet/api/authenticate",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "get start Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "633fa807-1fd0-4941-bb70-36f31bda3489",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"balance\", jsonData.data.balance);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"balance currency = player currency\", function () {",
											"    pm.expect(String(jsonData.data.currency)).to.deep.equal(\"eur\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/wallet/api/balance?player_token={{player_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"api",
										"balance"
									],
									"query": [
										{
											"key": "player_token",
											"value": "{{player_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deal for 3 hands",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c108315c-96ed-45f6-bcbc-08b3f04e4a80",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Value for 1st hand = 20\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(20);\r",
											"});\r",
											"\r",
											"pm.test(\"BJ for 1st hand = false\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"21 for 1st hand = false\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: Bust = false\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: canDouble = true\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: canSplit = true\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Value for 2nd hand = 19\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].value).to.deep.equal(19);\r",
											"});\r",
											"\r",
											"pm.test(\"BJ for 2nd hand = false\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].hasBJ).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"21 for 2nd hand = false\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].has21).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Bust = false\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].bust).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: canDouble = true\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].canDouble).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: canSplit = false\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Value for 3rd hand = 18\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].value).to.deep.equal(18);\r",
											"});\r",
											"\r",
											"pm.test(\"BJ for 3rd hand = false\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].hasBJ).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"21 for 3rd hand = false\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].has21).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: Bust = false\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].bust).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: canDouble = true\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].canDouble).to.deep.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: canSplit = false\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Balance = 1000000-60 = 999940\", function () {\r",
											"    pm.expect(jsonData.data.user.balance).to.deep.equal(999940);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
											"\r",
											"pm.environment.set(\"bet2_id\", jsonData.data.bets[1].bet_id);\r",
											"\r",
											"pm.environment.set(\"bet3_id\", jsonData.data.bets[2].bet_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6fad5bf6-398d-474b-9590-d66c80535091",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "bets[0][stake]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "cards[0][0]",
											"value": "10h"
										},
										{
											"key": "cards[0][1]",
											"value": "Qh"
										},
										{
											"key": "bets[1][stake]",
											"value": "20",
											"type": "text"
										},
										{
											"key": "cards[1][0]",
											"value": "10d"
										},
										{
											"key": "cards[1][1]",
											"value": "9d"
										},
										{
											"key": "bets[2][stake]",
											"value": "30",
											"type": "text"
										},
										{
											"key": "cards[2][0]",
											"value": "10c"
										},
										{
											"key": "cards[2][1]",
											"value": "8c"
										},
										{
											"key": "dealer_cards[0]",
											"value": "10s",
											"description": "dealer"
										},
										{
											"key": "dealer_cards[1]",
											"value": "9s",
											"description": "dealer"
										},
										{
											"key": "bets[0][hand_id]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "bets[1][hand_id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "bets[2][hand_id]",
											"value": "2",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"deal"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get Balance after Deal",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1fd85a8-5cea-4038-859c-58180fb398d9",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"balance currency = player currency\", function () {",
											"    pm.expect(String(jsonData.data.currency)).to.deep.equal(\"eur\");",
											"});",
											"",
											"pm.test(\"balance = balance - bet\", function () {",
											"    pm.expect(jsonData.data.balance).to.deep.equal(999940);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/wallet/api/balance?player_token={{player_token}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"api",
										"balance"
									],
									"query": [
										{
											"key": "player_token",
											"value": "{{player_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stand for the 1st hand - win",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9100814-954e-4ec7-8d23-253fe30a1dc8",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status code = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"pm.test(\"No new card is dealed\", function () {\r",
											"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Double unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Split unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Bust unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d4e01e09-2c33-451e-b81e-7bc79c48f03a",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet1_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"stand"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet1_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stand for the 2nd hand - push",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0497a1c-9bfd-4824-9827-1d6eda53f182",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status code = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"pm.test(\"No new card is dealed\", function () {\r",
											"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Double unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Split unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Bust unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "26e4e1f4-c430-43ee-b78b-46ad8d070b55",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet2_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"stand"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet2_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Stand for the 3rd hand - lose",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7736d98-70ab-45e0-bd86-a95edbc45855",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Bet status code = stood\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
											"});\r",
											"\r",
											"pm.test(\"No new card is dealed\", function () {\r",
											"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Double unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Split unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Bust unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37405c7f-63ba-428b-9fc8-a4a8b0264865",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet3_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"stand"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "bet_id",
											"value": "{{bet3_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Play for: 1st hand Win + 2nd hand Push + 3rd hand lose",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8621eed9-b3bd-42d4-866d-67e1839564cd",
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Status = success\", function () {\r",
											"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"All 3 hands bet are played\", function () {\r",
											"    pm.expect((jsonData.data.bets).length).to.deep.equal(3);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"1st hand: bet_id = current bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].bet_id).to.deep.equal(pm.environment.get(\"bet1_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: Bet status code = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: No new card is dealed\", function () {\r",
											"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: Payout = bet*2 = 20\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].return).to.deep.equal(20);\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: Game result = win\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].outcome).to.deep.equal(\"win\");\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: Verify Double unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"1st hand: Verify Split unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"2nd hand: bet_id = current bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].bet_id).to.deep.equal(pm.environment.get(\"bet2_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: Bet status code = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: No new card is dealed\", function () {\r",
											"    pm.expect((jsonData.data.bets[1].cards).length).to.deep.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: Payout = bet = 20\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].return).to.deep.equal(20);\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: Game result = push\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].outcome).to.deep.equal(\"push\");\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: Verify Double unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].canDouble).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"2nd hand: Verify Split unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[1].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"3rd hand: bet_id = current bet\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].bet_id).to.deep.equal(pm.environment.get(\"bet3_id\"));\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: Bet status code = completed\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].status).to.deep.equal(\"completed\");\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: No new card is dealed\", function () {\r",
											"    pm.expect((jsonData.data.bets[2].cards).length).to.deep.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: Payout = 0\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].return).to.deep.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: Game result = lose\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].outcome).to.deep.equal(\"lose\");\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: Verify Double unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].canDouble).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"3rd hand: Verify Split unavailability\", function () {\r",
											"    pm.expect(jsonData.data.bets[2].canSplit).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify dealer Bust\", function () {\r",
											"    pm.expect(jsonData.data.dealer.bust).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify dealer has 21\", function () {\r",
											"    pm.expect(jsonData.data.dealer.has21).to.deep.equal(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify dealer cards value = 9+10 = 19\", function () {\r",
											"    pm.expect(jsonData.data.dealer.value).to.deep.equal(19);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify balance = balance + win = 999980\", function () {\r",
											"    pm.expect(jsonData.data.user.balance).to.deep.equal(999980);\r",
											"});\r",
											"\r",
											"\r",
											"pm.environment.set(\"bet1_id\", \"\");\r",
											"pm.environment.set(\"bet2_id\", \"\");\r",
											"pm.environment.set(\"bet3_id\", \"\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ba101763-c794-45a3-9d15-4a12075848ee",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{url}}/tableBlackjack/game/dealerPlay?platform_token={{platform_token}}&cards=8s,9s,2c,3s,9d",
									"host": [
										"{{url}}"
									],
									"path": [
										"tableBlackjack",
										"game",
										"dealerPlay"
									],
									"query": [
										{
											"key": "platform_token",
											"value": "{{platform_token}}"
										},
										{
											"key": "cards",
											"value": "8s,9s,2c,3s,9d"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "32821a6c-db0e-4133-abc3-344c3c4a0d33",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e68148ee-eda9-4c26-bb91-d8c48afb6341",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Statistics",
			"item": [
				{
					"name": "getPlatformToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d45bf0c-f61b-4287-b37d-53d86f1dd47d",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"tests[\"SuccessStatus\"] = jsonData.status == \"success\";\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"platform_token\", jsonData.data.platform_token);\r",
									"\r",
									"pm.environment.set(\"AdminPanel_pass\", pm.globals.get(\"AdminPanel_password\"));\r",
									"\r",
									"console.log('cookies:  ' + pm.environment.get(\"AdminPanel_cookies\") + ', password:  ' + pm.environment.get(\"AdminPanel_pass\") + ', login:  ' + pm.environment.get(\"AdminPanel_login\") + ', player_id:  ' + pm.environment.get(\"player_id_random\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8719a4cf-c27a-4e10-924b-3033d1f5b866",
								"exec": [
									"var player_id_random = Date.now();",
									"",
									"pm.environment.set(\"player_id_random\", player_id_random);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/core/helper/getPlatformToken?gameName=tableBlackjack&player_id={{player_id_random}}&currency=eur&country=IT&language=en",
							"host": [
								"{{url}}"
							],
							"path": [
								"core",
								"helper",
								"getPlatformToken"
							],
							"query": [
								{
									"key": "gameName",
									"value": "tableBlackjack"
								},
								{
									"key": "player_id",
									"value": "{{player_id_random}}"
								},
								{
									"key": "currency",
									"value": "eur"
								},
								{
									"key": "country",
									"value": "IT"
								},
								{
									"key": "language",
									"value": "en",
									"description": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify statistics record limits (200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b420f314-e48a-4b4d-a6aa-3a13a4b05f99",
								"exec": [
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = error\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error code = 616\", function () {\r",
									"    pm.expect(jsonData.errors[0].code).to.deep.equal(616);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message = 'Param 'limit' should be smaller or equal 200'  \", function () {\r",
									"    pm.expect(jsonData.errors[0].message).to.deep.equal(\"Param 'limit' should be smaller or equal 200\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c73de245-2c32-4b35-9a64-927f46504397",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/statistics?platform_token={{platform_token}}&limit=201",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"statistics"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "limit",
									"value": "201"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deal for BJ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "567980f5-a679-441d-b880-712c6de8dd87",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value for 1st hand = 20\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(20);\r",
									"});\r",
									"\r",
									"pm.test(\"BJ for 1st hand = false\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"21 for 1st hand = false\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"1st hand: Bust = false\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"1st hand: canDouble = true\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"1st hand: canSplit = true\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "63a18613-5591-46c4-b4e7-a1e8c896443c",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "10h"
								},
								{
									"key": "cards[0][1]",
									"value": "Qh"
								},
								{
									"key": "dealer_cards[0]",
									"value": "10s",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "As",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Stand for the hand (dealer has BJ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35d0083f-6826-4c09-b982-d8abb4792c22",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Bet status code = stood\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
									"});\r",
									"\r",
									"pm.test(\"No new card is dealed\", function () {\r",
									"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Double unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Split unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bust unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "846cec6f-d11a-4cef-874b-36368224cc3b",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"stand"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "game resul = Dealer Play for BJ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b37dda8-f2d8-468b-bbd4-9357ec94e46f",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify dealer Bust\", function () {\r",
									"    pm.expect(jsonData.data.dealer.bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify dealer has 21\", function () {\r",
									"    pm.expect(jsonData.data.dealer.has21).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify dealer cards value = 10+A = 21\", function () {\r",
									"    pm.expect(jsonData.data.dealer.value).to.deep.equal(21);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "41561cc1-d96b-4276-a3df-93b4ec29b263",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/dealerPlay?platform_token={{platform_token}}&cards=8s,9s,2c,3s,9d",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"dealerPlay"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "cards",
									"value": "8s,9s,2c,3s,9d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify statistics record (1=BJ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc50b602-5799-42f0-aef9-f1452d1c32f5",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"dealer_cards_value = 21\", function () {\r",
									"    pm.expect(jsonData.data.games[0].dealer_cards_value).to.deep.equal(21);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Stand but Stand=true \", function () {\r",
									"    pm.expect(jsonData.data.games[0].stand).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Bust \", function () {\r",
									"    pm.expect(jsonData.data.games[0].bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result is BJ \", function () {\r",
									"    pm.expect(jsonData.data.games[0].hasBJ).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result for dealer cards value = 21 \", function () {\r",
									"    pm.expect(jsonData.data.games[0].has21).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Was Insurancee asked = false \", function () {\r",
									"    pm.expect(jsonData.data.games[0].askForInsurance).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "430d1f85-d2e3-4041-a0ac-5c6068acd264",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/statistics?platform_token={{platform_token}}&since_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"statistics"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "since_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deal for Bust",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70ba1130-e983-46a3-a7fd-e9e29b84555a",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value for 1st hand = 20\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(20);\r",
									"});\r",
									"\r",
									"pm.test(\"BJ for 1st hand = false\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"21 for 1st hand = false\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"1st hand: Bust = false\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"1st hand: canDouble = true\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"1st hand: canSplit = true\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b915ca21-d046-4102-900a-e0cc958e2d5a",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "10h"
								},
								{
									"key": "cards[0][1]",
									"value": "Qh"
								},
								{
									"key": "dealer_cards[0]",
									"value": "10s",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "5s",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Stand for the hand (dealer Bust)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c3a8fe4-3e37-4177-a84f-08f3ee8ac6bd",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Bet status code = stood\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
									"});\r",
									"\r",
									"pm.test(\"No new card is dealed\", function () {\r",
									"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Double unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Split unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bust unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6fdf950-0055-4b10-9935-c8956f9bee78",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"stand"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "game resul = Dealer Play for Bust",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38debfb3-3d00-4d36-8ed8-8201a30cfa60",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify dealer Bust\", function () {\r",
									"    pm.expect(jsonData.data.dealer.bust).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify dealer has 21\", function () {\r",
									"    pm.expect(jsonData.data.dealer.has21).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify dealer cards value = 10+K+2 = 22\", function () {\r",
									"    pm.expect(jsonData.data.dealer.value).to.deep.equal(22);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "71adc141-ec35-4328-923e-e96d39cc9167",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/dealerPlay?platform_token={{platform_token}}&cards=7s,9s,2c,3s,9d",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"dealerPlay"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "cards",
									"value": "7s,9s,2c,3s,9d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify statistics record (1=BJ, 2=Bust)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "212dea56-2e46-4200-9fb2-a04f1d868ec6",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"dealer_cards_value = 22\", function () {\r",
									"    pm.expect(jsonData.data.games[0].dealer_cards_value).to.deep.equal(22);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Stand \", function () {\r",
									"    pm.expect(jsonData.data.games[0].stand).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result is Bust \", function () {\r",
									"    pm.expect(jsonData.data.games[0].bust).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't BJ \", function () {\r",
									"    pm.expect(jsonData.data.games[0].hasBJ).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result for dealer cards value isn't 21 \", function () {\r",
									"    pm.expect(jsonData.data.games[0].has21).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Was Insurancee asked = false \", function () {\r",
									"    pm.expect(jsonData.data.games[0].askForInsurance).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"dealer_cards_value = 21\", function () {\r",
									"    pm.expect(jsonData.data.games[1].dealer_cards_value).to.deep.equal(21);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Stand but Stand=true \", function () {\r",
									"    pm.expect(jsonData.data.games[1].stand).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Bust \", function () {\r",
									"    pm.expect(jsonData.data.games[1].bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result is BJ \", function () {\r",
									"    pm.expect(jsonData.data.games[1].hasBJ).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result for dealer cards value = 21 \", function () {\r",
									"    pm.expect(jsonData.data.games[1].has21).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Was Insurancee asked = false \", function () {\r",
									"    pm.expect(jsonData.data.games[1].askForInsurance).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6e671940-699d-4133-a16a-82ee8bbe20a2",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/statistics?platform_token={{platform_token}}&since_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"statistics"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "since_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deal for Stand",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a37be284-29f3-4c04-be97-fcfba84c1946",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value for 1st hand = 20\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(20);\r",
									"});\r",
									"\r",
									"pm.test(\"BJ for 1st hand = false\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"21 for 1st hand = false\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"1st hand: Bust = false\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"1st hand: canDouble = true\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"1st hand: canSplit = true\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0b980cf9-2fde-4697-b0e1-e981c461a410",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "10h"
								},
								{
									"key": "cards[0][1]",
									"value": "Qh"
								},
								{
									"key": "dealer_cards[0]",
									"value": "10s",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "9s",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Stand for the hand (dealer Stand)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82a83fc9-146b-4b29-b07b-65fc96c5b8db",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Bet status code = stood\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
									"});\r",
									"\r",
									"pm.test(\"No new card is dealed\", function () {\r",
									"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Double unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Split unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bust unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e0521816-94f7-40d0-9179-77b7a9cd91ce",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"stand"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "game resul = Dealer Play for Stand",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "902921c7-1af8-44db-bfa2-40508eea201e",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify dealer Bust\", function () {\r",
									"    pm.expect(jsonData.data.dealer.bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify dealer has 21\", function () {\r",
									"    pm.expect(jsonData.data.dealer.has21).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify dealer cards value = 10+9 = 19\", function () {\r",
									"    pm.expect(jsonData.data.dealer.value).to.deep.equal(19);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "036ddd47-7aa7-4e9f-9116-6c9a8dfb7c67",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/dealerPlay?platform_token={{platform_token}}&cards=7s,9s,2c,3s,9d",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"dealerPlay"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "cards",
									"value": "7s,9s,2c,3s,9d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify statistics record (1=BJ, 2=Bust, 3=Stand)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aabd2fd5-30df-47e3-8b78-d9cb72f9aada",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"dealer_cards_value = 19\", function () {\r",
									"    pm.expect(jsonData.data.games[0].dealer_cards_value).to.deep.equal(19);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result is Stand \", function () {\r",
									"    pm.expect(jsonData.data.games[0].stand).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Bust \", function () {\r",
									"    pm.expect(jsonData.data.games[0].bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't BJ \", function () {\r",
									"    pm.expect(jsonData.data.games[0].hasBJ).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result for dealer cards value isn't 21 \", function () {\r",
									"    pm.expect(jsonData.data.games[0].has21).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Was Insurancee asked = false \", function () {\r",
									"    pm.expect(jsonData.data.games[0].askForInsurance).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"dealer_cards_value = 22\", function () {\r",
									"    pm.expect(jsonData.data.games[1].dealer_cards_value).to.deep.equal(22);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Stand \", function () {\r",
									"    pm.expect(jsonData.data.games[1].stand).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result is Bust \", function () {\r",
									"    pm.expect(jsonData.data.games[1].bust).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't BJ \", function () {\r",
									"    pm.expect(jsonData.data.games[1].hasBJ).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result for dealer cards value isn't 21 \", function () {\r",
									"    pm.expect(jsonData.data.games[1].has21).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Was Insurancee asked = false \", function () {\r",
									"    pm.expect(jsonData.data.games[1].askForInsurance).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"dealer_cards_value = 21\", function () {\r",
									"    pm.expect(jsonData.data.games[2].dealer_cards_value).to.deep.equal(21);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Stand  but Stand=true\", function () {\r",
									"    pm.expect(jsonData.data.games[2].stand).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Bust \", function () {\r",
									"    pm.expect(jsonData.data.games[2].bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result is BJ \", function () {\r",
									"    pm.expect(jsonData.data.games[2].hasBJ).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result for dealer cards value = 21 \", function () {\r",
									"    pm.expect(jsonData.data.games[2].has21).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Was Insurancee asked = false \", function () {\r",
									"    pm.expect(jsonData.data.games[2].askForInsurance).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c91231d2-f9dc-4f56-bc3c-0dca117eec36",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/statistics?platform_token={{platform_token}}&since_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"statistics"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "since_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deal for Stand with cards value = 21",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "953616f4-699e-4543-aff2-66b454a1811a",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Value for 1st hand = 20\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].value).to.deep.equal(20);\r",
									"});\r",
									"\r",
									"pm.test(\"BJ for 1st hand = false\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].hasBJ).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"21 for 1st hand = false\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].has21).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"1st hand: Bust = false\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"1st hand: canDouble = true\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"1st hand: canSplit = true\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set(\"bet1_id\", jsonData.data.bets[0].bet_id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "015ae034-d3e6-4040-9df6-f4985cc4fff8",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "bets[0][stake]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "cards[0][0]",
									"value": "10h"
								},
								{
									"key": "cards[0][1]",
									"value": "Qh"
								},
								{
									"key": "dealer_cards[0]",
									"value": "10s",
									"description": "dealer"
								},
								{
									"key": "dealer_cards[1]",
									"value": "5s",
									"description": "dealer"
								},
								{
									"key": "bets[0][hand_id]",
									"value": "0",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/deal?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"deal"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Stand for the hand (dealer Stand wth 21)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c977a13-1c02-4649-b745-a1c576a96f31",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Bet status code = stood\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].status).to.deep.equal(\"stood\");\r",
									"});\r",
									"\r",
									"pm.test(\"No new card is dealed\", function () {\r",
									"    pm.expect((jsonData.data.bets[0].cards).length).to.deep.equal(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Double unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canDouble).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Split unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].canSplit).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bust unavailability\", function () {\r",
									"    pm.expect(jsonData.data.bets[0].bust).to.deep.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c219a0ee-ab7f-435e-89ae-68a64d5fc8d4",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/stand?platform_token={{platform_token}}&bet_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"stand"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "bet_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "game resul = Dealer Play for Stand with 21",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6feae380-8499-4b79-8b49-37795b66d6d3",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify dealer Bust\", function () {\r",
									"    pm.expect(jsonData.data.dealer.bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify dealer has 21\", function () {\r",
									"    pm.expect(jsonData.data.dealer.has21).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify dealer cards value = 10+5+6 = 21\", function () {\r",
									"    pm.expect(jsonData.data.dealer.value).to.deep.equal(21);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6ce8e72d-4ebd-4baa-89be-1cf3cc050110",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/dealerPlay?platform_token={{platform_token}}&cards=6s,9s,2c,3s,9d",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"dealerPlay"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "cards",
									"value": "6s,9s,2c,3s,9d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "verify statistics record (1=BJ, 2=Bust, 3=Stand, 4=Stand for 21)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8804fde-1156-42bf-a737-181e75a42d01",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status = success\", function () {\r",
									"    pm.expect(jsonData.status).to.deep.equal(\"success\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"dealer_cards_value = 21\", function () {\r",
									"    pm.expect(jsonData.data.games[0].dealer_cards_value).to.deep.equal(21);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result is Stand \", function () {\r",
									"    pm.expect(jsonData.data.games[0].stand).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Bust \", function () {\r",
									"    pm.expect(jsonData.data.games[0].bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't BJ \", function () {\r",
									"    pm.expect(jsonData.data.games[0].hasBJ).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result for dealer cards value isn't 21 \", function () {\r",
									"    pm.expect(jsonData.data.games[0].has21).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Was Insurancee asked = false \", function () {\r",
									"    pm.expect(jsonData.data.games[0].askForInsurance).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"dealer_cards_value = 19\", function () {\r",
									"    pm.expect(jsonData.data.games[1].dealer_cards_value).to.deep.equal(19);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result is Stand \", function () {\r",
									"    pm.expect(jsonData.data.games[1].stand).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Bust \", function () {\r",
									"    pm.expect(jsonData.data.games[1].bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't BJ \", function () {\r",
									"    pm.expect(jsonData.data.games[1].hasBJ).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result for dealer cards value isn't 21 \", function () {\r",
									"    pm.expect(jsonData.data.games[1].has21).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Was Insurancee asked = false \", function () {\r",
									"    pm.expect(jsonData.data.games[1].askForInsurance).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"dealer_cards_value = 22\", function () {\r",
									"    pm.expect(jsonData.data.games[2].dealer_cards_value).to.deep.equal(22);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Stand \", function () {\r",
									"    pm.expect(jsonData.data.games[2].stand).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result is Bust \", function () {\r",
									"    pm.expect(jsonData.data.games[2].bust).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't BJ \", function () {\r",
									"    pm.expect(jsonData.data.games[2].hasBJ).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result for dealer cards value isn't 21 \", function () {\r",
									"    pm.expect(jsonData.data.games[2].has21).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Was Insurancee asked = false \", function () {\r",
									"    pm.expect(jsonData.data.games[2].askForInsurance).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"dealer_cards_value = 21\", function () {\r",
									"    pm.expect(jsonData.data.games[3].dealer_cards_value).to.deep.equal(21);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Stand  but Stand=true\", function () {\r",
									"    pm.expect(jsonData.data.games[3].stand).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result isn't Bust \", function () {\r",
									"    pm.expect(jsonData.data.games[3].bust).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result is BJ \", function () {\r",
									"    pm.expect(jsonData.data.games[3].hasBJ).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Game result for dealer cards value = 21 \", function () {\r",
									"    pm.expect(jsonData.data.games[3].has21).to.deep.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Was Insurancee asked = false \", function () {\r",
									"    pm.expect(jsonData.data.games[3].askForInsurance).to.deep.equal(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set(\"bet1_id\", \"\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0e17dc50-da20-4124-8372-2bebca8af0f5",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/statistics?platform_token={{platform_token}}&since_id={{bet1_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"statistics"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								},
								{
									"key": "since_id",
									"value": "{{bet1_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "Verify default settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b59d35e5-2d56-4339-a40a-418e41bfc537",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Last Ddealer Hhands default value = 10\", function () {\r",
									"    pm.expect(jsonData.data.gameParams.settings.last_dealer_hands.number).to.be.deep.equal(10);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Fast Play default value = OFF\", function () {\r",
									"    pm.expect(jsonData.data.gameParams.settings.fast_play.enabled).to.be.deep.equal(0);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Rebet&Deal default value = OFF\", function () {\r",
									"    pm.expect(jsonData.data.gameParams.settings.rebet_deal.enabled).to.be.deep.equal(0);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Sound default value = ON\", function () {\r",
									"    pm.expect(jsonData.data.gameParams.settings.sound.enabled).to.be.deep.equal(1);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Music default value = ON\", function () {\r",
									"    pm.expect(jsonData.data.gameParams.settings.music.enabled).to.be.deep.equal(1);\r",
									"    });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "201a52ee-3129-49e2-91e7-679f282dda2d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{url}}/tableBlackjack/game/init?platform_token={{platform_token}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"tableBlackjack",
								"game",
								"init"
							],
							"query": [
								{
									"key": "platform_token",
									"value": "{{platform_token}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}